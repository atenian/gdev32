/******************************************************************************
 * This demo draws a triangle by defining its vertices in 3 dimensions
 * (the 3rd dimension is currently ignored and is just set to 0).
 *
 * The drawing is accomplished by:
 * - Uploading the vertices to the GPU using a Vertex Buffer Object (VBO).
 * - Specifying the vertices' format using a Vertex Array Object (VAO).
 * - Using a GLSL shader program (consisting of a simple vertex shader and a
 *   simple fragment shader) to actually draw the vertices as a triangle.
 *
 * Happy hacking! - eric
 *****************************************************************************/

#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/gtc/type_ptr.hpp>
#include <gdev.h>

// change this to your desired window attributes
#define WINDOW_WIDTH  1280
#define WINDOW_HEIGHT 720
#define WINDOW_TITLE  "SUPER SMAAAAAAAAASH BROTHERSSSS!!"
GLFWwindow *pWindow;

// global variables
float jump, distance, arc, walk = 0;
int counter = 0;
bool switchCheck, onRight = true;

// define a vertex array to hold our vertices
// Background Vertices
float backgroundVertices[] =
{
    // position (x, y, z) color (r, g, b) normal (x, y, z) texture coordinates (s,t)
    // back/main background of the cube
    // Triangle 1
    0.0f, 1.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    1.0f, 0.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    0.0f, 1.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    1.0f, 1.0f, 0.0f, 0.8f, 0.8f, 0.8f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f,
};

float backgroundVertices2[] =
{
    // position (x, y, z) color (r, g, b) normal (x, y, z) texture coordinates (s,t)
    // Bottom of the cube
    // Triangle 1
    0.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
    1.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,

    // Triangle 2
    0.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
    1.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,

    // Top of the cube
    // Triangle 1
    0.0f, 1.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    0.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,

    // Triangle 2
    0.0f, 1.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 0.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    // Back of the cube
    // Triangle 1
    0.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 2
    0.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    1.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,

    // Left of the cube
    // Triangle 1
    0.0f, 1.0f, 0.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f,
    0.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,

    // Triangle 2
    0.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
    0.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f,

    // Right of the cube
    // Triangle 1
    1.0f, 1.0f, 0.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
    1.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f,

    // Triangle 2
    1.0f, 0.0f, 2.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    1.0f, 1.0f, 2.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
};

//Main Platform Vertices
float mainPlatformVertices[] =
{
// position (x, y, z) color (r, g, b) normal (x, y, z) texture coordinates (s,t)
// Main platform vertices
// Top vertices
    // Triangle 1
    -0.5f, 0.0f, -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  0.0f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 1.0f,
    -0.5f,  0.0f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 1.0f,

    // Triangle 2
    -0.5f, 0.0f, -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,
    0.5f,  0.0f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  0.0f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    

// Front vertices
    // Triangle 1
    -0.5f, 0.0f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.43f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.46f,  -0.3f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 2
    -0.4f, -0.4f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    -0.43f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 3
    -0.4f, -0.4f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.43f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.35f,  -0.5f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 4
    -0.35f, -0.5f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.43f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 5
    -0.35f, -0.5f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    -0.3f,  -0.55f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 6
    -0.27f, -0.53f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.3f,  -0.55f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 7
    -0.27f, -0.53f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    -0.2f,  -0.53f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    
    // Triangle 8
    -0.17f, -0.51f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.2f,  -0.53f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 9
    -0.17f, -0.51f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    -0.15f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    
    // Triangle 10
    -0.17f, -0.51f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.15f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    -0.1f,  -0.58f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 
    
    // Triangle 11
    -0.06f, -0.6f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    -0.15f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 12
    -0.06f, -0.6f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.15f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 13
    -0.06f, -0.6f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    -0.02f,  -0.64f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 14
    0.05f, -0.7f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.02f,  -0.64f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 15
    0.05f, -0.7f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    0.1f,  -0.58f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 16
    0.2f, -0.66f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.1f,  -0.58f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 17
    0.2f, -0.66f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    0.2f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 18
    0.2f, -0.66f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.2f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.3f,  -0.5f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 19
    0.32f, 0.0f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.3f,  -0.5f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    0.2f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 20
    0.32f, 0.0f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.35f,  -0.36f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.3f,  -0.4f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

    // Triangle 21
    0.32f, 0.0f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.4f,  -0.3f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    0.35f,  -0.36f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    // Triangle 22
    0.32f, 0.0f, -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.5f,  0.0f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    0.4f,  -0.3f,  -0.5f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 

// Back vertices
    // Triangle 1
    -0.5f, 0.0f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.43f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,

    // Triangle 2
    -0.4f, -0.4f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.43f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    -0.46f,  -0.3f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,

    // Triangle 3
    -0.4f, -0.4f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.35f,  -0.5f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.43f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,

    // Triangle 4
    -0.35f, -0.5f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 
    -0.43f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,
    
    // Triangle 5
    -0.35f, -0.5f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.3f,  -0.55f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 6
    -0.27f, -0.53f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.3f,  -0.55f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 7
    -0.27f, -0.53f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.2f,  -0.53f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    
    // Triangle 8
    -0.17f, -0.51f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.2f,  -0.53f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 9
    -0.17f, -0.51f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.15f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    -0.3f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
    
    // Triangle 10
    -0.17f, -0.51f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.15f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 
    
    // Triangle 11
    -0.06f, -0.6f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.15f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    -0.1f,  -0.58f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 12
    -0.06f, -0.6f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.15f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 13
    -0.06f, -0.6f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    -0.02f,  -0.64f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 14
    0.05f, -0.7f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    -0.02f,  -0.64f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 15
    0.05f, -0.7f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.1f,  -0.58f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 16
    0.2f, -0.66f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.1f,  -0.58f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 17
    0.2f, -0.66f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.2f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    0.0f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 18
    0.2f, -0.66f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.3f,  -0.5f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.2f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 19
    0.32f, 0.0f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.2f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    0.3f,  -0.5f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 20
    0.32f, 0.0f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.3f,  -0.4f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.35f,  -0.36f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

    // Triangle 21
    0.32f, 0.0f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f,
    0.35f,  -0.36f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
    0.4f,  -0.3f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 

    // Triangle 22
    0.32f, 0.0f, -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.5f, 1.0f,
    0.4f,  -0.3f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.5f,  0.0f,  -0.3f, 0.3f, 0.93f, 0.3f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 

// Bottom vertices
    // Rectangle 1
    -0.5f, 0.0f, -0.5f, 1.0f, 0.0f, 0.0f, 0.9917f, 0.1322f, 0.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f, -0.5f, 1.0f, 0.0f, 0.0f, 0.9917f, 0.1322f, 0.0f, 0.0f, 0.0f,    
    -0.5f, 0.0f, -0.3f, 1.0f, 0.0f, 0.0f, 0.9917f, 0.1322f, 0.0f, 1.0f, 0.0f,

    -0.5f, 0.0f, -0.3f, 1.0f, 0.0f, 0.0f, -0.9917f, -0.1322f, 0.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f, -0.5f, 1.0f, 0.0f, 0.0f, -0.9917f, -0.1322f, 0.0f, 1.0f, 0.0f,
    -0.46f,  -0.3f, -0.3f, 1.0f, 0.0f, 0.0f, -0.9917f, -0.1322f, 0.0f, 0.0f, 0.0f,

    // Rectangle 2
    -0.4f, -0.4f, -0.5f, 1.0f, 0.0f, 0.0f, -0.858f, -0.515f, 0.0f, 1.0f, 0.0f,
    -0.4f, -0.4f, -0.3f, 1.0f, 0.0f, 0.0f, -0.858f, -0.515f, 0.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.858f, -0.515f, 0.0f, 0.0f, 0.0f,

    -0.4f, -0.4f, -0.3f, 1.0f, 0.0f, 0.0f, 0.858f, 0.515f, 0.0f, 0.5f, 1.0f,
    -0.46f,  -0.3f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.858f, 0.515f, 0.0f, 0.0f, 0.0f,
    -0.46f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.858f, 0.515f, 0.0f, 0.253f, 1.0f, 0.0f,

    // Rectangle 3
    -0.4f, -0.4f, -0.5f, 1.0f, 0.0f, 0.0f, 0.894f, 0.447f, 0.0f, 0.0f, 0.0f,
    -0.35f,  -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.894f, 0.447f, 0.0f, 0.5f, 1.0f,
    -0.4f, -0.4f, -0.3f, 1.0f, 0.0f, 0.0f, 0.894f, 0.447f, 0.0f, 1.0f, 0.0f,

    -0.4f, -0.4f, -0.3f, 1.0f, 0.0f, 0.0f, -0.894f, -0.447f, 0.0f, 0.5f, 1.0f,
    -0.35f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, -0.894f, -0.447f, 0.0f, 0.0f, 0.0f,
    -0.35f, -0.5f, -0.3f, 1.0f, 0.0f, 0.0f, -0.894f, -0.447f, 0.0f, 1.0f, 0.0f,

    // Rectangle 4
    -0.35f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, -0.707f, -0.707f, 0.0f, 0.5f, 1.0f,
    -0.3f,  -0.55f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.707f, -0.707f, 0.0f, 0.0f, 0.0f,
    -0.3f,  -0.55f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.707f, -0.707f, 0.0f, 1.0f, 0.0f, 

    -0.35f, -0.5f, -0.3f, 1.0f, 0.0f, 0.0f, 0.707f, 0.707f, 0.0f, 0.0f, 0.0f,
    -0.35f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.707f, 0.707f, 0.0f, 0.5f, 1.0f,     
    -0.3f,  -0.55f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.707f, 0.707f, 0.0f, 1.0f, 0.0f,

    // Rectangle 5
    -0.27f, -0.53f, -0.5f, 1.0f, 0.0f, 0.0f, -0.554f, 0.832f, 0.0f, 0.5f, 1.0f,
    -0.3f,  -0.55f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.554f, 0.832f, 0.0f, 0.0f, 0.0f, 
    -0.3f,  -0.55f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.554f, 0.832f, 0.0f, 1.0f, 0.0f,

    -0.27f, -0.53f, -0.3f, 1.0f, 0.0f, 0.0f, 0.554f, -0.832f, 0.0f, 0.0f, 0.0f,
    -0.3f,  -0.55f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.554f, -0.832f, 0.0f, 1.0f, 0.0f,
    -0.27f, -0.53f, -0.5f, 1.0f, 0.0f, 0.0f, 0.554f, -0.832f, 0.0f, 0.5f, 1.0f, 

    // Rectangle 6
    -0.27f, -0.53f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    -0.2f,  -0.53f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    -0.27f, -0.53f, -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,

    -0.27f, -0.53f, -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f,
    -0.2f,  -0.53f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
    -0.2f,  -0.53f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 

    // Rectangle 7
    -0.17f, -0.51f, -0.5f, 1.0f, 0.0f, 0.0f, -0.556f, 0.833f, 0.0f, 0.5f, 1.0f,
    -0.2f,  -0.53f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.556f, 0.833f, 0.0f, 0.0f, 0.0f,
    -0.2f,  -0.53f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.556f, 0.833f, 0.0f, 1.0f, 0.0f,

    -0.17f, -0.51f, -0.3f, 1.0f, 0.0f, 0.0f, 0.556f, -0.833f, 0.0f, 0.0f, 0.0f,
    -0.2f,  -0.53f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.556f, -0.833f, 0.0f, 1.0f, 0.0f,
    -0.17f, -0.51f, -0.5f, 1.0f, 0.0f, 0.0f, 0.556f, -0.833f, 0.0f, 0.5f, 1.0f,

    // Rectangle 8
    -0.17f, -0.51f, -0.5f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 0.0f, 0.0f, 
    -0.17f, -0.51f, -0.3f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 1.0f, 0.0f,

    -0.17f, -0.51f, -0.3f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 0.0f, 0.0f, 
    -0.1f,  -0.58f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 1.0f, 0.0f, 

    // Rectangle 9
    -0.06f, -0.6f, -0.5f, 1.0f, 0.0f, 0.0f, -0.447f, 0.894f, 0.0f, 0.0f, 0.0f,
    -0.06f, -0.6f, -0.3f, 1.0f, 0.0f, 0.0f, -0.447f, 0.894f, 0.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.447f, 0.894f, 0.0f, 1.0f, 0.0f, 

    -0.06f, -0.6f, -0.3f, 1.0f, 0.0f, 0.0f, 0.447f, -0.894f, 0.0f, 0.5f, 1.0f,
    -0.1f,  -0.58f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.447f, -0.894f, 0.0f, 0.0f, 0.0f, 
    -0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.447f, -0.894f, 0.0f, 1.0f, 0.0f, 

    // Rectangle 10
    -0.06f, -0.6f, -0.5f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 0.5f, 1.0f,
    -0.02f,  -0.64f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 1.0f, 0.0f,
    -0.06f, -0.6f, -0.3f, 1.0f, 0.0f, 0.0f, -0.7071f, -0.7071f, 0.0f, 0.0f, 0.0f,

    -0.06f, -0.6f, -0.3f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 0.5f, 1.0f,
    -0.02f,  -0.64f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 0.0f, 0.0f,
    -0.02f,  -0.64f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.7071f, 0.7071f, 0.0f, 1.0f, 0.0f,

    // Rectangle 11
    0.05f, -0.7f, -0.5f, 1.0f, 0.0f, 0.0f, 0.652f, 0.759f, 0.0f, 0.5f, 1.0f,
    -0.02f,  -0.64f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.652f, 0.759f, 0.0f, 0.0f, 0.0f, 
    -0.02f,  -0.64f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.652f, 0.759f, 0.0f, 1.0f, 0.0f,

    0.05f, -0.7f, -0.3f, 1.0f, 0.0f, 0.0f, -0.652f, -0.759f, 0.0f, 0.5f, 1.0f,
    -0.02f, -0.64f, -0.3f, 1.0f, 0.0f, 0.0f, -0.652f, -0.759f, 0.0f, 1.0f, 0.0f,
    0.05f, -0.7f, -0.5f, 1.0f, 0.0f, 0.0f, -0.652f, -0.759f, 0.0f, 0.0f, 0.0f,

    // Rectangle 12
    0.05f, -0.7f, -0.5f, 1.0f, 0.0f, 0.0f, 0.921f, -0.384f, 0.0f, 0.5f, 1.0f,
    0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.921f, -0.384f, 0.0f, 1.0f, 0.0f,
    0.05f, -0.7f, -0.3f, 1.0f, 0.0f, 0.0f, 0.921f, -0.384f, 0.0f, 0.0f, 0.0f, 

    0.05f, -0.7f, -0.3f, 1.0f, 0.0f, 0.0f, -0.921f, 0.384f, 0.0f, 0.5f, 1.0f,
    0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.921f, 0.384f, 0.0f, 0.0f, 0.0f, 
    0.1f,  -0.58f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.921f, 0.384f, 0.0f, 1.0f, 0.0f,

    // Rectangle 13
    0.2f, -0.66f, -0.5f, 1.0f, 0.0f, 0.0f, 0.625f, 0.781f, 0.0f, 0.5f, 1.0f,
    0.2f, -0.66f, -0.3f, 1.0f, 0.0f, 0.0f, 0.625f, 0.781f, 0.0f, 0.0f, 0.0f,
    0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.625f, 0.781f, 0.0f, 1.0f, 0.0f,

    0.2f, -0.66f, -0.3f, 1.0f, 0.0f, 0.0f, -0.625f, -0.781f, 0.0f, 0.5f, 1.0f,
    0.1f,  -0.58f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.625f, -0.781f, 0.0f, 0.0f, 0.0f,
    0.1f,  -0.58f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.625f, -0.781f, 0.0f, 1.0f, 0.0f,

    // Rectangle 14
    0.2f, -0.66f, -0.5f, 1.0f, 0.0f, 0.0f, -0.85f, 0.53f, 0.0f, 0.5f, 1.0f,
    0.3f,  -0.5f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.85f, 0.53f, 0.0f, 0.0f, 0.0f, 
    0.2f, -0.66f, -0.3f, 1.0f, 0.0f, 0.0f, -0.85f, 0.53f, 0.0f, 1.0f, 0.0f,

    0.2f, -0.66f, -0.3f, 1.0f, 0.0f, 0.0f, 0.85f, -0.53f, 0.0f, 0.5f, 1.0f,
    0.3f,  -0.5f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.85f, -0.53f, 0.0f, 0.0f, 0.0f, 
    0.3f,  -0.5f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.85f, -0.53f, 0.0f, 1.0f, 0.0f, 

    // Rectangle 15
    0.3f,  -0.5f,  -0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
    0.3f,  -0.4f,  -0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.5f, 1.0f, 
    0.3f,  -0.5f,  -0.3f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 

    0.3f,  -0.5f,  -0.3f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
    0.3f,  -0.4f,  -0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.5f, 1.0f, 
    0.3f,  -0.4f,  -0.3f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,

    // Rectangle 16
    0.35f,  -0.36f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.625f, 0.781f, 0.0f, 0.0f, 0.0f,
    0.3f,  -0.4f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.625f, 0.781f, 0.0f, 0.5f, 1.0f, 
    0.35f,  -0.36f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.625f, 0.781f, 0.0f, 1.0f, 0.0f,

    0.3f, -0.4f, -0.5f, 1.0f, 0.0f, 0.0f, 0.625f, -0.781f, 0.0f, 0.0f, 0.0f, 
    0.35f, -0.36f, -0.3f, 1.0f, 0.0f, 0.0f, 0.625f, -0.781f, 0.0f, 0.5f, 1.0f,
    0.3f, -0.4f, -0.3f, 1.0f, 0.0f, 0.0f, 0.625f, -0.781f, 0.0f, 1.0f, 0.0f, 

    // Rectangle 17
    0.35f,  -0.36f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.769f, -0.641f, 0.0f, 0.0f, 0.0f,
    0.35f,  -0.36f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.769f, -0.641f, 0.0f, 0.5f, 1.0f,
    0.4f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.769f, -0.641f, 0.0f, 1.0f, 0.0f, 

    0.4f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.769f, 0.641f, 0.0f, 0.0f, 0.0f, 
    0.4f,  -0.3f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.769f, 0.641f, 0.0f, 0.5f, 1.0f, 
    0.35f,  -0.36f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.769f, 0.641f, 0.0f, 1.0f, 0.0f,

    // Rectangle 18
    0.5f,  0.0f,  -0.3f, 1.0f, 0.0f, 0.0f, -0.949f, 0.316f, 0.0f, 0.0f, 0.0f,
    0.4f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.949f, 0.316f, 0.0f, 0.5f, 1.0f,
    0.5f,  0.0f,  -0.5f, 1.0f, 0.0f, 0.0f, -0.949f, 0.316f, 0.0f, 1.0f, 0.0f, 

    0.4f,  -0.3f,  -0.5f, 1.0f, 0.0f, 0.0f, 0.949f, -0.316f, 0.0f, 0.0f, 0.0f, 
    0.5f,  0.0f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.949f, -0.316f, 0.0f, 0.5f, 1.0f,
    0.4f,  -0.3f,  -0.3f, 1.0f, 0.0f, 0.0f, 0.949f, -0.316f, 0.0f, 1.0f, 0.0f, 
};

//Platform Vertices
float platformVertices[] =
{
    // position (x, y, z) color (r, g, b) normal (x, y, z) texture coordinates (s,t)
// Platform vertices
// Top vertices
    // Triangle 1
    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  0.0f,  -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    0.0f,  0.0f,  -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,

    // Triangle 2
    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  0.0f,  -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    0.5f,  0.0f,  -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,

// Front vertices
    // Triangle 1
    0.0f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.1f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.0f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

    // Triangle 2
    0.0f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.1f,  0.0f,  -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.1f,  -0.03f,  -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

    // Triangle 3
    0.1f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,    
    0.35f, -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.15f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

    // Triangle 4
    0.1f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,    
    0.1f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.35f, -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,

    // Triangle 5    
    0.1f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.4f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.35f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

    // Triangle 6    
    0.1f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.4f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.4f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

    // Triangle 7    
    0.4f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.5f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.4f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

    // Triangle 8    
    0.4f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.5f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.5f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

// Back vertices
    // Triangle 1
    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.0f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.1f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

    // Triangle 2
    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.1f,  -0.03f,  -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.1f,  0.0f,  -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

    // Triangle 3
    0.1f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.15f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,    
    0.35f, -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 4
    0.1f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.35f, -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f,    
    0.1f,  0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

    // Triangle 5    
    0.1f,  0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.35f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.4f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 6    
    0.1f,  0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.4f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.4f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,

    // Triangle 7    
    0.4f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.4f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,
    0.5f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,

    // Triangle 8    
    0.4f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f,
    0.5f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f,
    0.5f,  0.0f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f,

// Bottom Vertices
    // Rectangle 1
    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.5f, 1.0f,
    0.0f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f,

    0.0f, 0.0f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
    0.0f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f,

    // Rectangle 2
    0.1f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.0f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,
    0.1f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    0.0f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.1f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,
    0.0f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    // Rectangle 3
    0.1f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 0.0f, 0.0f,
    0.15f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 0.5f, 1.0f,    
    0.1f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 1.0f, 1.0f,

    0.1f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 0.0f, 0.0f,
    0.15f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 0.5f, 1.0f,
    0.15f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.8139f, 0.5819f, 0.0f, 1.0f, 0.0f,    

    // Rectangle 4
    0.15f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.15f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,  
    0.35f, -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    0.35f, -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,    
    0.35f, -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,
    0.15f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    // Rectangle 5
    0.35f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 0.0f, 0.0f,
    0.35f,  -0.1f, -0.5f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 0.5f, 1.0f,
    0.4f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 1.0f, 0.0f,

    0.4f, -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 0.0f, 0.0f,
    0.4f, -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 0.5f, 1.0f,
    0.35f,  -0.1f, -0.3f, 1.0f, 1.0f, 1.0f, 0.814f, -0.581f, 0.0f, 1.0f, 0.0f,

    // Rectangle 6 
    0.4f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.4f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,
    0.5f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,

    0.4f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    0.5f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0f, 0.5f, 1.0f,

    // Rectangle 7
    0.5f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  -0.03f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
    0.5f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f,

    0.5f,  0.0f, -0.5f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
    0.5f,  0.0f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
    0.5f,  -0.03f, -0.3f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f, 0.5f, 1.0f,

};

// Kirby Vertices
float kirbyVertices[] =
{
    // position (x, y, z) color (r, g, b) normal (x, y, z) texture coordinates (s,t)
    // Main platform vertices
    // Triangle 1
    0.014226f, 0.031207f, -0.000326f, 1.0f, 0.0f, 0.0f, -0.7188592f, 0.6718762f, 0.17839305f, 0.0f, -0.0f, 
    0.030226f, 0.029986f, 0.035667f, 1.0f, 0.0f, 0.0f, -0.50980186f, 0.66547984f, 0.5451959f, 0.0f, -0.0f, 
    0.042226f, 0.046231f, -0.004234f, 1.0f, 0.0f, 0.0f, -0.07935601f, 0.9968291f, 0.005860001f, 0.0f, -0.0f, 
    0.015226f, 0.018073f, 0.021594f, 1.0f, 0.0f, 0.0f, -0.9060552f, 0.06689301f, 0.41783908f, 0.0f, -0.0f, 
    0.056226f, 0.029956f, 0.040667f, 1.0f, 0.0f, 0.0f, 0.1754839f, 0.7508465f, 0.63673764f, 0.0f, -0.0f, 
    0.074226f, 0.033072f, 0.021686f, 1.0f, 0.0f, 0.0f, 0.663702f, 0.7047f, 0.250794f, 0.0f, -0.0f, 
    0.022226f, 0.034422f, -0.035306f, 1.0f, 0.0f, 0.0f, -0.53389597f, 0.6436089f, -0.5483819f, 0.0f, -0.0f, 
    0.014226f, 0.031379f, -0.028324f, 1.0f, 0.0f, 0.0f, -0.80879766f, 0.5021058f, -0.30616385f, 0.0f, -0.0f, 
    0.007226f, 0.020263f, -0.009393f, 1.0f, 0.0f, 0.0f, -0.9959879f, 0.08039099f, -0.039311998f, 0.0f, -0.0f, 
    0.014226f, 0.020379f, -0.028392f, 1.0f, 0.0f, 0.0f, -0.9025272f, 0.06274101f, -0.4260381f, 0.0f, -0.0f, 
    0.013226f, 0.009386f, -0.02946f, 1.0f, 0.0f, 0.0f, -0.7619669f, -0.48396993f, -0.43032494f, 0.0f, -0.0f, 
    0.013226f, 0.007159f, 0.007527f, 1.0f, 0.0f, 0.0f, -0.76417327f, -0.62222725f, 0.16991906f, 0.0f, -0.0f, 
    0.021226f, 0.000177f, 0.004484f, 1.0f, 0.0f, 0.0f, -0.26760104f, -0.96314913f, 0.027083004f, 0.0f, -0.0f, 
    0.022226f, 0.002337f, -0.021503f, 1.0f, 0.0f, 0.0f, -0.28508803f, -0.95005614f, -0.12695801f, 0.0f, -0.0f, 
    0.032226f, 0.011484f, -0.045447f, 1.0f, 0.0f, 0.0f, -0.218098f, -0.432614f, -0.874802f, 0.0f, -0.0f, 
    0.036226f, 0.002404f, -0.032503f, 1.0f, 0.0f, 0.0f, -0.08145401f, -0.90249914f, -0.42291906f, 0.0f, -0.0f, 
    0.052226f, 0.00238f, -0.028503f, 1.0f, 0.0f, 0.0f, 0.22773592f, -0.92026466f, -0.3181969f, 0.0f, -0.0f, 
    0.056226f, 0.009441f, -0.03846f, 1.0f, 0.0f, 0.0f, 0.41977292f, -0.56091785f, -0.7135558f, 0.0f, -0.0f, 
    0.068226f, 0.000257f, -0.008516f, 1.0f, 0.0f, 0.0f, 0.30273402f, -0.94457513f, -0.12700401f, 0.0f, -0.0f, 
    0.076226f, 0.007269f, -0.010473f, 1.0f, 0.0f, 0.0f, 0.7553479f, -0.56293994f, -0.33548197f, 0.0f, -0.0f, 
    0.068226f, 0.000104f, 0.016483f, 1.0f, 0.0f, 0.0f, 0.23540914f, -0.9685296f, 0.08082805f, 0.0f, -0.0f, 
    0.078226f, 0.007061f, 0.023526f, 1.0f, 0.0f, 0.0f, 0.8361639f, -0.52583194f, 0.15598299f, 0.0f, -0.0f, 
    0.034226f, 3.6e-05f, 0.027483f, 1.0f, 0.0f, 0.0f, -0.26026487f, -0.9332256f, 0.24769388f, 0.0f, -0.0f, 
    0.071226f, 0.006981f, 0.036526f, 1.0f, 0.0f, 0.0f, 0.54480195f, -0.62395597f, 0.5602409f, 0.0f, -0.0f, 
    0.043226f, 0.00692f, 0.046526f, 1.0f, 0.0f, 0.0f, -0.10426298f, -0.6478898f, 0.7545648f, 0.0f, -0.0f, 
    0.030226f, 0.006969f, 0.038526f, 1.0f, 0.0f, 0.0f, -0.63373196f, -0.50741094f, 0.5838819f, 0.0f, -0.0f, 
    0.055226f, -7.434719e-18f, 0.033483f, 1.0f, 0.0f, 0.0f, 0.12121103f, -0.9352542f, 0.33257708f, 0.0f, -0.0f, 
    0.058226f, 0.006932f, 0.044526f, 1.0f, 0.0f, 0.0f, 0.26731f, -0.61148f, 0.74474f, 0.0f, -0.0f, 
    0.059226f, 0.017913f, 0.047594f, 1.0f, 0.0f, 0.0f, 0.33437896f, -0.007994999f, 0.94240487f, 0.0f, -0.0f, 
    0.073226f, 0.017968f, 0.038593f, 1.0f, 0.0f, 0.0f, 0.7693311f, 0.17295802f, 0.6149921f, 0.0f, -0.0f, 
    0.042226f, 0.016901f, 0.049587f, 1.0f, 0.0f, 0.0f, -0.31473315f, 0.13832906f, 0.9390465f, 0.0f, -0.0f, 
    0.024226f, 0.016987f, 0.035587f, 1.0f, 0.0f, 0.0f, -0.734814f, 0.039544f, 0.677115f, 0.0f, -0.0f, 
    0.082226f, 0.020189f, 0.002607f, 1.0f, 0.0f, 0.0f, 0.987034f, 0.118759f, -0.107982f, 0.0f, -0.0f, 
    0.071226f, 0.021373f, -0.027386f, 1.0f, 0.0f, 0.0f, 0.8318228f, 0.12588297f, -0.5405779f, 0.0f, -0.0f, 
    0.045226f, 0.02349f, -0.046374f, 1.0f, 0.0f, 0.0f, 0.252877f, 0.155478f, -0.954924f, 0.0f, -0.0f, 
    0.057226f, 0.022459f, -0.04138f, 1.0f, 0.0f, 0.0f, 0.5595118f, 0.14116892f, -0.8167116f, 0.0f, -0.0f, 
    0.054226f, 0.037409f, -0.033288f, 1.0f, 0.0f, 0.0f, 0.45810026f, 0.70328844f, -0.5436263f, 0.0f, -0.0f, 
    0.072226f, 0.035256f, -0.008301f, 1.0f, 0.0f, 0.0f, 0.66511184f, 0.7221708f, -0.18998796f, 0.0f, -0.0f, 
    0.081226f, 0.019091f, 0.0186f, 1.0f, 0.0f, 0.0f, 0.9656351f, 0.12575701f, 0.22745103f, 0.0f, -0.0f, 
    0.044226f, 0.03744f, -0.038288f, 1.0f, 0.0f, 0.0f, 0.14358096f, 0.7395748f, -0.65758175f, 0.0f, -0.0f, 
    0.032226f, 0.02449f, -0.046367f, 1.0f, 0.0f, 0.0f, -0.25355896f, 0.28793997f, -0.92347085f, 0.0f, -0.0f, 
    0.020226f, 0.02244f, -0.03838f, 1.0f, 0.0f, 0.0f, -0.713247f, 0.079339f, -0.696408f, 0.0f, -0.0f, 
    0.033226f, 0.037446f, -0.039288f, 1.0f, 0.0f, 0.0f, -0.17430988f, 0.7962064f, -0.5793716f, 0.0f, -0.0f, 
    -0.042226f, 0.046231f, -0.004234f, 1.0f, 0.0f, 0.0f, 0.07935601f, 0.9968291f, 0.005860001f, 0.0f, -0.0f, 
    -0.030226f, 0.029986f, 0.035667f, 1.0f, 0.0f, 0.0f, 0.50980186f, 0.66547984f, 0.5451959f, 0.0f, -0.0f, 
    -0.014226f, 0.031207f, -0.000326f, 1.0f, 0.0f, 0.0f, 0.7188592f, 0.6718762f, 0.17839305f, 0.0f, -0.0f, 
    -0.015226f, 0.018073f, 0.021594f, 1.0f, 0.0f, 0.0f, 0.9060552f, 0.06689301f, 0.41783908f, 0.0f, -0.0f, 
    -0.074226f, 0.033072f, 0.021686f, 1.0f, 0.0f, 0.0f, -0.663702f, 0.7047f, 0.250794f, 0.0f, -0.0f, 
    -0.056226f, 0.029956f, 0.040667f, 1.0f, 0.0f, 0.0f, -0.1754839f, 0.7508465f, 0.63673764f, 0.0f, -0.0f, 
    -0.014226f, 0.031379f, -0.028324f, 1.0f, 0.0f, 0.0f, 0.80879766f, 0.5021058f, -0.30616385f, 0.0f, -0.0f, 
    -0.022226f, 0.034422f, -0.035306f, 1.0f, 0.0f, 0.0f, 0.53389597f, 0.6436089f, -0.5483819f, 0.0f, -0.0f, 
    -0.014226f, 0.020379f, -0.028392f, 1.0f, 0.0f, 0.0f, 0.9025272f, 0.06274101f, -0.4260381f, 0.0f, -0.0f, 
    -0.007226f, 0.020263f, -0.009393f, 1.0f, 0.0f, 0.0f, 0.9959879f, 0.08039099f, -0.039311998f, 0.0f, -0.0f, 
    -0.013226f, 0.007159f, 0.007527f, 1.0f, 0.0f, 0.0f, 0.76417327f, -0.62222725f, 0.16991906f, 0.0f, -0.0f, 
    -0.013226f, 0.009386f, -0.02946f, 1.0f, 0.0f, 0.0f, 0.7619665f, -0.4839697f, -0.43032575f, 0.0f, -0.0f, 
    -0.022226f, 0.002337f, -0.021503f, 1.0f, 0.0f, 0.0f, 0.28508803f, -0.95005614f, -0.12695801f, 0.0f, -0.0f, 
    -0.021226f, 0.000177f, 0.004484f, 1.0f, 0.0f, 0.0f, 0.26760104f, -0.96314913f, 0.027083004f, 0.0f, -0.0f, 
    -0.036226f, 0.002404f, -0.032503f, 1.0f, 0.0f, 0.0f, 0.08145401f, -0.90249914f, -0.42291906f, 0.0f, -0.0f, 
    -0.032226f, 0.011484f, -0.045447f, 1.0f, 0.0f, 0.0f, 0.218098f, -0.432614f, -0.874802f, 0.0f, -0.0f, 
    -0.056226f, 0.009441f, -0.03846f, 1.0f, 0.0f, 0.0f, -0.41977292f, -0.56091785f, -0.7135558f, 0.0f, -0.0f, 
    -0.052226f, 0.00238f, -0.028503f, 1.0f, 0.0f, 0.0f, -0.22773592f, -0.92026466f, -0.3181969f, 0.0f, -0.0f, 
    -0.076226f, 0.007269f, -0.010473f, 1.0f, 0.0f, 0.0f, -0.7553484f, -0.5629393f, -0.33548215f, 0.0f, -0.0f, 
    -0.068226f, 0.000257f, -0.008516f, 1.0f, 0.0f, 0.0f, -0.30273402f, -0.94457513f, -0.12700401f, 0.0f, -0.0f, 
    -0.078226f, 0.007061f, 0.023526f, 1.0f, 0.0f, 0.0f, -0.8361639f, -0.52583194f, 0.15598299f, 0.0f, -0.0f, 
    -0.068226f, 0.000104f, 0.016483f, 1.0f, 0.0f, 0.0f, -0.23540914f, -0.9685296f, 0.08082805f, 0.0f, -0.0f, 
    -0.034226f, 3.6e-05f, 0.027483f, 1.0f, 0.0f, 0.0f, 0.26026487f, -0.9332256f, 0.24769388f, 0.0f, -0.0f, 
    -0.071226f, 0.006981f, 0.036526f, 1.0f, 0.0f, 0.0f, -0.54480195f, -0.62395597f, 0.5602409f, 0.0f, -0.0f, 
    -0.030226f, 0.006969f, 0.038526f, 1.0f, 0.0f, 0.0f, 0.63373196f, -0.50741094f, 0.5838819f, 0.0f, -0.0f, 
    -0.043226f, 0.00692f, 0.046526f, 1.0f, 0.0f, 0.0f, 0.10426298f, -0.6478898f, 0.7545648f, 0.0f, -0.0f, 
    -0.058226f, 0.006932f, 0.044526f, 1.0f, 0.0f, 0.0f, -0.26731f, -0.61148f, 0.74474f, 0.0f, -0.0f, 
    -0.055226f, -7.434719e-18f, 0.033483f, 1.0f, 0.0f, 0.0f, -0.12121103f, -0.9352542f, 0.33257708f, 0.0f, -0.0f, 
    -0.059226f, 0.017913f, 0.047594f, 1.0f, 0.0f, 0.0f, -0.33437896f, -0.007994999f, 0.94240487f, 0.0f, -0.0f, 
    -0.073226f, 0.017968f, 0.038593f, 1.0f, 0.0f, 0.0f, -0.7693311f, 0.17295802f, 0.6149921f, 0.0f, -0.0f, 
    -0.024226f, 0.016987f, 0.035587f, 1.0f, 0.0f, 0.0f, 0.734814f, 0.039544f, 0.677115f, 0.0f, -0.0f, 
    -0.042226f, 0.016901f, 0.049587f, 1.0f, 0.0f, 0.0f, 0.31473315f, 0.13832906f, 0.9390465f, 0.0f, -0.0f, 
    -0.071226f, 0.021373f, -0.027386f, 1.0f, 0.0f, 0.0f, -0.8318228f, 0.12588297f, -0.5405779f, 0.0f, -0.0f, 
    -0.082226f, 0.020189f, 0.002607f, 1.0f, 0.0f, 0.0f, -0.987034f, 0.118759f, -0.107982f, 0.0f, -0.0f, 
    -0.057226f, 0.022459f, -0.04138f, 1.0f, 0.0f, 0.0f, -0.5595118f, 0.14116892f, -0.8167116f, 0.0f, -0.0f, 
    -0.045226f, 0.02349f, -0.046374f, 1.0f, 0.0f, 0.0f, -0.252877f, 0.155478f, -0.954924f, 0.0f, -0.0f, 
    -0.054226f, 0.037409f, -0.033288f, 1.0f, 0.0f, 0.0f, -0.45810026f, 0.70328844f, -0.5436263f, 0.0f, -0.0f, 
    -0.072226f, 0.035256f, -0.008301f, 1.0f, 0.0f, 0.0f, -0.66511184f, 0.7221708f, -0.18998796f, 0.0f, -0.0f, 
    -0.081226f, 0.019091f, 0.0186f, 1.0f, 0.0f, 0.0f, -0.9656351f, 0.12575701f, 0.22745103f, 0.0f, -0.0f, 
    -0.044226f, 0.03744f, -0.038288f, 1.0f, 0.0f, 0.0f, -0.14358096f, 0.7395748f, -0.65758175f, 0.0f, -0.0f, 
    -0.032226f, 0.02449f, -0.046367f, 1.0f, 0.0f, 0.0f, 0.25355896f, 0.28793997f, -0.92347085f, 0.0f, -0.0f, 
    -0.020226f, 0.02244f, -0.03838f, 1.0f, 0.0f, 0.0f, 0.713247f, 0.079339f, -0.696408f, 0.0f, -0.0f, 
    -0.033226f, 0.037446f, -0.039288f, 1.0f, 0.0f, 0.0f, 0.17430988f, 0.7962064f, -0.5793716f, 0.0f, -0.0f, 
    0.000226f, 0.01818f, -0.027897f, 1.0f, 0.0f, 0.0f, 0.0f, -0.95158625f, -0.30738205f, 0.747079f, -0.091988f, 
    0.025226f, 0.018352f, -0.013899f, 1.0f, 0.0f, 0.0f, 0.27487502f, -0.9496281f, -0.15050001f, 0.737911f, -0.091761f, 
    0.000226f, 0.013556f, 0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, -0.99992466f, 0.012274995f, 0.747079f, -0.090858f, 
    0.025226f, 0.01872f, 0.016098f, 1.0f, 0.0f, 0.0f, 0.27487198f, -0.9456509f, 0.17375198f, 1.120961f, -0.023322f, 
    0.000226f, 0.013556f, 0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, -0.99992466f, 0.012274995f, 1.908512f, -0.005114f, 
    0.025226f, 0.018352f, -0.013899f, 1.0f, 0.0f, 0.0f, 0.27487502f, -0.9496281f, -0.15050001f, 1.546664f, -0.04076f, 
    0.000226f, 0.018892f, 0.030096f, 1.0f, 0.0f, 0.0f, 0.0f, -0.94375837f, 0.3306361f, 0.516257f, -0.014603f, 
    -0.024774f, 0.01872f, 0.016098f, 1.0f, 0.0f, 0.0f, -0.27487198f, -0.9456509f, 0.17375198f, 2.696064f, -0.023322f, 
    0.000226f, 0.030797f, -0.055052f, 1.0f, 0.0f, 0.0f, 0.0f, -0.7948072f, -0.6068621f, 0.747079f, -0.094366f, 
    0.028226f, 0.030895f, -0.047053f, 1.0f, 0.0f, 0.0f, 0.31403804f, -0.8278431f, -0.46481806f, 0.741888f, -0.094249f, 
    0.048226f, 0.03114f, -0.027056f, 1.0f, 0.0f, 0.0f, 0.5399121f, -0.7998432f, -0.26219407f, 0.736579f, -0.093944f, 
    0.056226f, 0.031484f, 0.000941f, 1.0f, 0.0f, 0.0f, 0.5408151f, -0.84107816f, 0.010322003f, 0.731017f, -0.093522f, 
    0.048226f, 0.031827f, 0.028937f, 1.0f, 0.0f, 0.0f, 0.5399121f, -0.7931732f, 0.28172907f, 1.03941f, -0.093589f, 
    0.028226f, 0.032072f, 0.048934f, 1.0f, 0.0f, 0.0f, 0.314028f, -0.816199f, 0.48498f, 0.78527f, -0.081279f, 
    0.056226f, 0.031484f, 0.000941f, 1.0f, 0.0f, 0.0f, 0.5408151f, -0.84107816f, 0.010322003f, 1.274573f, -0.110258f, 
    0.067226f, 0.052865f, 0.038679f, 1.0f, 0.0f, 0.0f, 0.70734805f, -0.57990307f, 0.40419206f, 1.011201f, -0.208734f, 
    0.038226f, 0.053221f, 0.067675f, 1.0f, 0.0f, 0.0f, 0.41358906f, -0.57619506f, 0.70494205f, 0.767063f, -0.192065f, 
    0.000226f, 0.032171f, 0.056933f, 1.0f, 0.0f, 0.0f, 0.0f, -0.77967834f, 0.6261803f, 0.516257f, -0.076663f, 
    -0.027774f, 0.032072f, 0.048934f, 1.0f, 0.0f, 0.0f, -0.314028f, -0.816199f, 0.48498f, 0.247243f, -0.081279f, 
    -0.037774f, 0.053221f, 0.067675f, 1.0f, 0.0f, 0.0f, -0.41358906f, -0.57619506f, 0.70494205f, 0.265194f, -0.192065f, 
    -0.066774f, 0.052865f, 0.038679f, 1.0f, 0.0f, 0.0f, -0.70734805f, -0.57990307f, 0.40419206f, 0.021312f, -0.208734f, 
    0.078226f, 0.079842f, 0.045348f, 1.0f, 0.0f, 0.0f, 0.8261487f, -0.3011149f, 0.47624382f, 0.994275f, -0.35773f, 
    0.045226f, 0.080247f, 0.078344f, 1.0f, 0.0f, 0.0f, 0.47670013f, -0.29120305f, 0.8294322f, 0.756805f, -0.337984f, 
    -0.044774f, 0.080247f, 0.078344f, 1.0f, 0.0f, 0.0f, -0.47670013f, -0.29120305f, 0.8294322f, 0.275452f, -0.337984f, 
    0.000226f, 0.053344f, 0.077674f, 1.0f, 0.0f, 0.0f, 0.0f, -0.5219191f, 0.8529951f, 0.516257f, -0.18591f, 
    -0.077774f, 0.079842f, 0.045348f, 1.0f, 0.0f, 0.0f, -0.8261487f, -0.3011149f, 0.47624382f, 0.038238f, -0.35773f, 
    -0.089774f, 0.07929f, 0.000354f, 1.0f, 0.0f, 0.0f, -0.9370924f, -0.34905517f, 0.0042810016f, -0.194617f, -0.384657f, 
    0.082226f, 0.108762f, 0.047993f, 1.0f, 0.0f, 0.0f, 0.8156014f, -0.004938002f, 0.5785933f, 0.981197f, -0.526216f, 
    0.047226f, 0.109179f, 0.08199f, 1.0f, 0.0f, 0.0f, 0.44955105f, -0.05955501f, 0.8912671f, 0.749111f, -0.505444f, 
    0.077226f, 0.052399f, 0.000684f, 1.0f, 0.0f, 0.0f, 0.77683717f, -0.62965417f, 0.0077230018f, 1.245338f, -0.231814f, 
    0.000226f, 0.080394f, 0.090342f, 1.0f, 0.0f, 0.0f, 0.0f, -0.2444829f, 0.96965367f, 0.516257f, -0.330803f, 
    0.038226f, 0.051577f, -0.066306f, 1.0f, 0.0f, 0.0f, 0.41359785f, -0.59332776f, -0.69057876f, 0.741569f, -0.097608f, 
    0.067226f, 0.051933f, -0.03731f, 1.0f, 0.0f, 0.0f, 0.7073461f, -0.5896441f, -0.38984805f, 0.735995f, -0.09718f, 
    0.077226f, 0.052399f, 0.000684f, 1.0f, 0.0f, 0.0f, 0.77683717f, -0.62965417f, 0.0077230018f, 0.730277f, -0.096601f, 
    0.000226f, 0.051454f, -0.076306f, 1.0f, 0.0f, 0.0f, 0.0f, -0.5426938f, -0.8399307f, 0.747079f, -0.097764f, 
    0.090226f, 0.07929f, 0.000354f, 1.0f, 0.0f, 0.0f, 0.9370924f, -0.34905517f, 0.0042810016f, 1.22713f, -0.384657f, 
    0.095226f, 0.108173f, 2.401923e-17f, 1.0f, 0.0f, 0.0f, 0.99999535f, -0.0027420009f, -0.0013950005f, 0.729439f, -0.104775f, 
    0.090226f, 0.07929f, 0.000354f, 1.0f, 0.0f, 0.0f, 0.9370924f, -0.34905517f, 0.0042810016f, 0.729815f, -0.100474f, 
    0.078226f, 0.078738f, -0.04464f, 1.0f, 0.0f, 0.0f, 0.8271398f, -0.30736095f, -0.4704989f, 0.735611f, -0.101162f, 
    0.082226f, 0.107596f, -0.046994f, 1.0f, 0.0f, 0.0f, 0.81655145f, -0.009581004f, -0.5771933f, 0.735293f, -0.105496f, 
    0.078226f, 0.1375f, -0.045361f, 1.0f, 0.0f, 0.0f, 0.8260082f, 0.30044806f, -0.47690812f, 0.734961f, -0.109765f, 
    0.090226f, 0.138052f, -0.000367f, 1.0f, 0.0f, 0.0f, 0.93420035f, 0.35672212f, -0.004378001f, 0.729068f, -0.109083f, 
    0.067226f, 0.16348f, -0.03868f, 1.0f, 0.0f, 0.0f, 0.703427f, 0.585932f, -0.402336f, 0.734539f, -0.113547f, 
    0.077226f, 0.163947f, -0.000685f, 1.0f, 0.0f, 0.0f, 0.773761f, 0.63343f, -0.007775f, 0.7286f, -0.112962f, 
    0.048226f, 0.184518f, -0.028937f, 1.0f, 0.0f, 0.0f, 0.51471007f, 0.8036971f, -0.29857102f, 0.733818f, -0.116464f, 
    0.056226f, 0.184862f, -0.000941f, 1.0f, 0.0f, 0.0f, 0.54738986f, 0.8368148f, -0.010266997f, 0.72786f, -0.116042f, 
    0.025226f, 0.198621f, -0.01611f, 1.0f, 0.0f, 0.0f, 0.30341217f, 0.93937355f, -0.15974508f, 0.731752f, -0.118244f, 
    0.047226f, 0.107167f, -0.08199f, 1.0f, 0.0f, 0.0f, 0.42324108f, -0.013720004f, -0.90591323f, 0.741173f, -0.106023f, 
    0.045226f, 0.137095f, -0.078357f, 1.0f, 0.0f, 0.0f, 0.47904706f, 0.29217902f, -0.8277351f, 0.740978f, -0.110265f, 
    0.045226f, 0.078333f, -0.077636f, 1.0f, 0.0f, 0.0f, 0.47953713f, -0.30761907f, -0.8218362f, 0.741355f, -0.101663f, 
    0.038226f, 0.163125f, -0.067676f, 1.0f, 0.0f, 0.0f, 0.41114715f, 0.5822552f, -0.7013822f, 0.740725f, -0.113969f, 
    0.028226f, 0.184273f, -0.048935f, 1.0f, 0.0f, 0.0f, 0.30627096f, 0.8025579f, -0.5119559f, 0.740263f, -0.116776f, 
    0.015226f, 0.198499f, -0.026108f, 1.0f, 0.0f, 0.0f, 0.19123708f, 0.9370304f, -0.29223713f, 0.738743f, -0.118407f, 
    0.029226f, 0.198805f, -0.001112f, 1.0f, 0.0f, 0.0f, 0.30128998f, 0.9534609f, -0.011696999f, 0.726002f, -0.118023f, 
    0.000226f, 0.202789f, -0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, 0.9999249f, -0.012260999f, 0.711805f, -0.118705f, 
    0.000226f, 0.107007f, -0.094988f, 1.0f, 0.0f, 0.0f, 0.0f, -0.015080006f, -0.99988633f, 0.747079f, -0.106217f, 
    0.000226f, 0.136947f, -0.090354f, 1.0f, 0.0f, 0.0f, 0.0f, 0.24582505f, -0.9693142f, 0.747079f, -0.110447f, 
    0.000226f, 0.078186f, -0.089633f, 1.0f, 0.0f, 0.0f, 0.0f, -0.26818115f, -0.9633686f, 0.747079f, -0.101845f, 
    0.000226f, 0.163002f, -0.077675f, 1.0f, 0.0f, 0.0f, 0.0f, 0.5303492f, -0.8477793f, 0.747079f, -0.114125f, 
    0.000226f, 0.184175f, -0.056934f, 1.0f, 0.0f, 0.0f, 0.0f, 0.7734618f, -0.6338428f, 0.747079f, -0.116893f, 
    0.000226f, 0.19845f, -0.030109f, 1.0f, 0.0f, 0.0f, 0.0f, 0.92930585f, -0.36931098f, 0.747079f, -0.118465f, 
    0.095226f, 0.108173f, 2.401923e-17f, 1.0f, 0.0f, 0.0f, 0.99999535f, -0.0027420009f, -0.0013950005f, 1.212256f, -0.554425f, 
    0.090226f, 0.138052f, -0.000367f, 1.0f, 0.0f, 0.0f, 0.93420035f, 0.35672212f, -0.004378001f, 1.197638f, -0.724451f, 
    0.078226f, 0.138604f, 0.044627f, 1.0f, 0.0f, 0.0f, 0.8365473f, 0.2821391f, 0.46966618f, 0.968631f, -0.697267f, 
    0.043226f, 0.150923f, 0.074477f, 1.0f, 0.0f, 0.0f, 0.448138f, 0.441914f, 0.7771f, 0.737571f, -0.75266f, 
    0.045226f, 0.125114f, 0.081793f, 1.0f, 0.0f, 0.0f, 0.48690405f, 0.17598902f, 0.8555421f, 0.736546f, -0.598278f, 
    0.000226f, 0.164891f, 0.076305f, 1.0f, 0.0f, 0.0f, 0.0f, 0.585967f, 0.810335f, 0.516257f, -0.831645f, 
    0.000226f, 0.139156f, 0.089621f, 1.0f, 0.0f, 0.0f, 0.0f, 0.31208298f, 0.9500549f, 0.516257f, -0.67034f, 
    0.067226f, 0.164413f, 0.03731f, 1.0f, 0.0f, 0.0f, 0.6927369f, 0.59169495f, 0.41232595f, 0.953501f, -0.854726f, 
    0.038226f, 0.164769f, 0.066306f, 1.0f, 0.0f, 0.0f, 0.34527203f, 0.66342807f, 0.6638151f, 0.733468f, -0.8378f, 
    -0.037774f, 0.164769f, 0.066306f, 1.0f, 0.0f, 0.0f, -0.34527203f, 0.66342807f, 0.6638151f, 0.298789f, -0.8378f, 
    -0.042774f, 0.150923f, 0.074477f, 1.0f, 0.0f, 0.0f, -0.448138f, 0.441914f, 0.7771f, 0.294686f, -0.75266f, 
    0.000226f, 0.185549f, 0.055051f, 1.0f, 0.0f, 0.0f, 0.0f, 0.7887781f, 0.6146781f, 0.516257f, -0.965768f, 
    -0.027774f, 0.185451f, 0.047052f, 1.0f, 0.0f, 0.0f, -0.30626002f, 0.8148771f, 0.49211806f, 0.311098f, -0.970384f, 
    -0.066774f, 0.164413f, 0.03731f, 1.0f, 0.0f, 0.0f, -0.6927369f, 0.59169495f, 0.41232595f, 0.079013f, -0.854726f, 
    -0.047774f, 0.185205f, 0.027055f, 1.0f, 0.0f, 0.0f, -0.5147078f, 0.8107807f, 0.27876592f, 0.101837f, -0.982437f, 
    -0.089774f, 0.138052f, -0.000367f, 1.0f, 0.0f, 0.0f, -0.93420035f, 0.35672212f, -0.004378001f, -0.165125f, -0.724451f, 
    -0.076774f, 0.163947f, -0.000685f, 1.0f, 0.0f, 0.0f, -0.773761f, 0.63343f, -0.007775f, -0.146661f, -0.87755f, 
    -0.077774f, 0.138604f, 0.044627f, 1.0f, 0.0f, 0.0f, -0.8365473f, 0.2821391f, 0.46966618f, 0.063883f, -0.697267f, 
    -0.089774f, 0.138052f, -0.000367f, 1.0f, 0.0f, 0.0f, -0.93420035f, 0.35672212f, -0.004378001f, 0.694541f, -0.109083f, 
    -0.076774f, 0.163947f, -0.000685f, 1.0f, 0.0f, 0.0f, -0.773761f, 0.63343f, -0.007775f, 0.695009f, -0.112962f, 
    -0.066774f, 0.16348f, -0.03868f, 1.0f, 0.0f, 0.0f, -0.703427f, 0.585932f, -0.402336f, 0.68907f, -0.113547f, 
    -0.094774f, 0.108173f, 2.401923e-17f, 1.0f, 0.0f, 0.0f, -0.99999535f, -0.0027420009f, -0.0013950005f, 0.694171f, -0.104775f, 
    -0.077774f, 0.1375f, -0.045361f, 1.0f, 0.0f, 0.0f, -0.8260082f, 0.30044806f, -0.47690812f, 0.688648f, -0.109765f, 
    -0.094774f, 0.108173f, 2.401923e-17f, 1.0f, 0.0f, 0.0f, -0.99999535f, -0.0027420009f, -0.0013950005f, -0.179743f, -0.554425f, 
    -0.081774f, 0.108762f, 0.047993f, 1.0f, 0.0f, 0.0f, -0.8156014f, -0.004938002f, 0.5785933f, 0.051317f, -0.526216f, 
    -0.037774f, 0.163125f, -0.067676f, 1.0f, 0.0f, 0.0f, -0.41114715f, 0.5822552f, -0.7013822f, 0.682885f, -0.113969f, 
    -0.055774f, 0.184862f, -0.000941f, 1.0f, 0.0f, 0.0f, -0.54738986f, 0.8368148f, -0.010266997f, -0.117426f, -0.999106f, 
    -0.047774f, 0.184518f, -0.028937f, 1.0f, 0.0f, 0.0f, -0.51471007f, 0.8036971f, -0.29857102f, 0.689792f, -0.116464f, 
    -0.027774f, 0.184273f, -0.048935f, 1.0f, 0.0f, 0.0f, -0.30627096f, 0.8025579f, -0.5119559f, 0.683346f, -0.116776f, 
    -0.055774f, 0.184862f, -0.000941f, 1.0f, 0.0f, 0.0f, -0.54738986f, 0.8368148f, -0.010266997f, 0.69575f, -0.116042f, 
    -0.014774f, 0.198499f, -0.026108f, 1.0f, 0.0f, 0.0f, -0.19123708f, 0.9370304f, -0.29223713f, 0.684866f, -0.118407f, 
    0.000226f, 0.184175f, -0.056934f, 1.0f, 0.0f, 0.0f, 0.0f, 0.7734618f, -0.6338428f, 0.67653f, -0.116893f, 
    0.000226f, 0.19845f, -0.030109f, 1.0f, 0.0f, 0.0f, 0.0f, 0.92930585f, -0.36931098f, 0.67653f, -0.118465f, 
    -0.024774f, 0.198621f, -0.01611f, 1.0f, 0.0f, 0.0f, -0.3034121f, 0.9393734f, -0.15974607f, 0.691858f, -0.118244f, 
    0.015226f, 0.198499f, -0.026108f, 1.0f, 0.0f, 0.0f, 0.19123708f, 0.9370304f, -0.29223713f, 0.668194f, -0.118407f, 
    -0.028774f, 0.198805f, -0.001112f, 1.0f, 0.0f, 0.0f, -0.30128905f, 0.9534612f, -0.011697003f, 0.697608f, -0.118023f, 
    -0.024774f, 0.198989f, 0.013886f, 1.0f, 0.0f, 0.0f, -0.30340803f, 0.9430101f, 0.13665901f, 0.154409f, -1.068603f, 
    -0.028774f, 0.198805f, -0.001112f, 1.0f, 0.0f, 0.0f, -0.30128905f, 0.9534612f, -0.011697003f, -0.044082f, -1.077323f, 
    -0.014774f, 0.199112f, 0.023884f, 1.0f, 0.0f, 0.0f, -0.19122012f, 0.9439175f, 0.26917416f, 0.338282f, -1.061936f, 
    0.000226f, 0.202789f, -0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, 0.9999249f, -0.012260999f, 0.516257f, -1.104249f, 
    0.000226f, 0.199161f, 0.027884f, 1.0f, 0.0f, 0.0f, 0.0f, 0.93808436f, 0.34640712f, 0.516257f, -1.059628f, 
    0.015226f, 0.199112f, 0.023884f, 1.0f, 0.0f, 0.0f, 0.19122012f, 0.9439175f, 0.26917416f, 0.693975f, -1.061936f, 
    0.028226f, 0.185451f, 0.047052f, 1.0f, 0.0f, 0.0f, 0.30626017f, 0.81487745f, 0.4921173f, 0.721159f, -0.970384f, 
    0.048226f, 0.185205f, 0.027055f, 1.0f, 0.0f, 0.0f, 0.5147078f, 0.8107807f, 0.27876592f, 0.930677f, -0.982437f, 
    0.025226f, 0.198989f, 0.013886f, 1.0f, 0.0f, 0.0f, 0.30340803f, 0.9430101f, 0.13665901f, 0.878105f, -1.068603f, 
    0.029226f, 0.198805f, -0.001112f, 1.0f, 0.0f, 0.0f, 0.30128998f, 0.9534609f, -0.011696999f, 1.076595f, -1.077323f, 
    0.077226f, 0.163947f, -0.000685f, 1.0f, 0.0f, 0.0f, 0.773761f, 0.63343f, -0.007775f, 1.179174f, -0.87755f, 
    0.056226f, 0.184862f, -0.000941f, 1.0f, 0.0f, 0.0f, 0.54738986f, 0.8368148f, -0.010266997f, 1.149939f, -0.999106f, 
    -0.044774f, 0.137095f, -0.078357f, 1.0f, 0.0f, 0.0f, -0.47904706f, 0.29217902f, -0.8277351f, 0.682631f, -0.110265f, 
    0.000226f, 0.163002f, -0.077675f, 1.0f, 0.0f, 0.0f, 0.0f, 0.5303492f, -0.8477793f, 0.67653f, -0.114125f, 
    -0.046774f, 0.107167f, -0.08199f, 1.0f, 0.0f, 0.0f, -0.42324108f, -0.013720004f, -0.90591323f, 0.682436f, -0.106023f, 
    0.000226f, 0.136947f, -0.090354f, 1.0f, 0.0f, 0.0f, 0.0f, 0.24582505f, -0.9693142f, 0.67653f, -0.110447f, 
    0.000226f, 0.078186f, -0.089633f, 1.0f, 0.0f, 0.0f, 0.0f, -0.26818115f, -0.9633686f, 0.67653f, -0.101845f, 
    0.000226f, 0.107007f, -0.094988f, 1.0f, 0.0f, 0.0f, 0.0f, -0.015080006f, -0.99988633f, 0.67653f, -0.106217f, 
    0.000226f, 0.051454f, -0.076306f, 1.0f, 0.0f, 0.0f, 0.0f, -0.5426938f, -0.8399307f, 0.67653f, -0.097764f, 
    -0.044774f, 0.078333f, -0.077636f, 1.0f, 0.0f, 0.0f, -0.47953713f, -0.30761907f, -0.8218362f, 0.682255f, -0.101663f, 
    0.000226f, 0.030797f, -0.055052f, 1.0f, 0.0f, 0.0f, 0.0f, -0.7948072f, -0.6068621f, 0.67653f, -0.094366f, 
    -0.037774f, 0.051577f, -0.066306f, 1.0f, 0.0f, 0.0f, -0.41359785f, -0.59332776f, -0.69057876f, 0.68204f, -0.097608f, 
    -0.027774f, 0.030895f, -0.047053f, 1.0f, 0.0f, 0.0f, -0.31403804f, -0.8278431f, -0.46481806f, 0.681722f, -0.094249f, 
    0.000226f, 0.01818f, -0.027897f, 1.0f, 0.0f, 0.0f, 0.0f, -0.95158625f, -0.30738205f, 0.67653f, -0.091988f, 
    -0.047774f, 0.03114f, -0.027056f, 1.0f, 0.0f, 0.0f, -0.5399121f, -0.7998432f, -0.26219407f, 0.68703f, -0.093944f, 
    -0.066774f, 0.051933f, -0.03731f, 1.0f, 0.0f, 0.0f, -0.70734656f, -0.58964366f, -0.38984776f, 0.687615f, -0.09718f, 
    -0.077774f, 0.078738f, -0.04464f, 1.0f, 0.0f, 0.0f, -0.8271398f, -0.30736095f, -0.4704989f, 0.687998f, -0.101162f, 
    -0.081774f, 0.107596f, -0.046994f, 1.0f, 0.0f, 0.0f, -0.81655145f, -0.009581004f, -0.5771933f, 0.688317f, -0.105496f, 
    -0.076774f, 0.052399f, 0.000684f, 1.0f, 0.0f, 0.0f, -0.77683717f, -0.62965417f, 0.0077230018f, 0.693333f, -0.096601f, 
    -0.089774f, 0.07929f, 0.000354f, 1.0f, 0.0f, 0.0f, -0.9370924f, -0.34905517f, 0.0042810016f, 0.693794f, -0.100474f, 
    -0.055774f, 0.031484f, 0.000941f, 1.0f, 0.0f, 0.0f, -0.5408151f, -0.84107816f, 0.010322003f, 0.692592f, -0.093522f, 
    -0.024774f, 0.018352f, -0.013899f, 1.0f, 0.0f, 0.0f, -0.27487502f, -0.9496281f, -0.15050001f, 0.685698f, -0.091761f, 
    -0.024774f, 0.01872f, 0.016098f, 1.0f, 0.0f, 0.0f, -0.27487198f, -0.9456509f, 0.17375198f, -0.088447f, -0.023322f, 
    -0.024774f, 0.018352f, -0.013899f, 1.0f, 0.0f, 0.0f, -0.27487502f, -0.9496281f, -0.15050001f, -0.514151f, -0.04076f, 
    0.000226f, 0.013556f, 0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, -0.99992466f, 0.012274995f, -0.875999f, -0.005114f, 
    0.000226f, 0.013556f, 0.001161f, 1.0f, 0.0f, 0.0f, 0.0f, -0.99992466f, 0.012274995f, 0.67653f, -0.090858f, 
    -0.047774f, 0.031827f, 0.028937f, 1.0f, 0.0f, 0.0f, -0.5399121f, -0.7931732f, 0.28172907f, -0.006897f, -0.093589f, 
    -0.076774f, 0.052399f, 0.000684f, 1.0f, 0.0f, 0.0f, -0.77683717f, -0.62965417f, 0.0077230018f, -0.212825f, -0.231814f, 
    -0.055774f, 0.031484f, 0.000941f, 1.0f, 0.0f, 0.0f, -0.5408151f, -0.84107816f, 0.010322003f, -0.24206f, -0.110258f, 
    -0.046774f, 0.109179f, 0.08199f, 1.0f, 0.0f, 0.0f, -0.44955105f, -0.05955501f, 0.8912671f, 0.283145f, -0.505444f, 
    -0.044774f, 0.125114f, 0.081793f, 1.0f, 0.0f, 0.0f, -0.48690405f, 0.17598902f, 0.8555421f, 0.295711f, -0.598278f, 
    0.000226f, 0.109338f, 0.094988f, 1.0f, 0.0f, 0.0f, 0.0f, 0.022670003f, 0.9997431f, 0.516257f, -0.49775f, 
    -0.109544f, 0.128933f, 0.027804f, 1.0f, 0.0f, 0.0f, -0.66311824f, 0.58519024f, 0.46671918f, 0.499893f, -0.511678f, 
    -0.119215f, 0.117076f, 0.026021f, 1.0f, 0.0f, 0.0f, -0.8355723f, 0.28607708f, 0.46901917f, 0.499902f, -0.511639f, 
    -0.108419f, 0.10708f, 0.038418f, 1.0f, 0.0f, 0.0f, -0.4837263f, 0.03296102f, 0.87459856f, 0.499976f, -0.51164f, 
    -0.088305f, 0.12242f, 0.043736f, 1.0f, 0.0f, 0.0f, -0.19465391f, 0.11627795f, 0.9739555f, 0.499987f, -0.511708f, 
    -0.12479f, 0.101607f, 0.018241f, 1.0f, 0.0f, 0.0f, -0.9890069f, -0.05009099f, 0.13912699f, 0.499931f, -0.511601f, 
    -0.120094f, 0.119624f, 0.004937f, 1.0f, 0.0f, 0.0f, -0.8679467f, 0.46007583f, -0.18707994f, 0.499872f, -0.511643f, 
    -0.122641f, 0.097744f, -0.001234f, 1.0f, 0.0f, 0.0f, -0.93895054f, -0.1402351f, -0.3141752f, 0.499931f, -0.511601f, 
    -0.114916f, 0.109351f, -0.012928f, 1.0f, 0.0f, 0.0f, -0.7058155f, 0.052408036f, -0.70645446f, 0.499902f, -0.511639f, 
    -0.114974f, 0.085609f, -0.005141f, 1.0f, 0.0f, 0.0f, -0.58879036f, -0.56831735f, -0.57475334f, 0.499985f, -0.511595f, 
    -0.104599f, 0.120049f, -0.016987f, 1.0f, 0.0f, 0.0f, -0.5253982f, 0.3372501f, -0.7811653f, 0.499893f, -0.511678f, 
    -0.108057f, 0.076833f, 0.004538f, 1.0f, 0.0f, 0.0f, -0.25906694f, -0.9584138f, -0.11969697f, 0.50004f, -0.511591f, 
    -0.117973f, 0.082704f, 0.012515f, 1.0f, 0.0f, 0.0f, -0.7890113f, -0.61340326f, 0.03460801f, 0.500003f, -0.51158f, 
    -0.080782f, 0.108901f, -0.024424f, 1.0f, 0.0f, 0.0f, 0.015475996f, -0.26456094f, -0.9642448f, 0.499987f, -0.511708f, 
    -0.102185f, 0.095879f, -0.018058f, 1.0f, 0.0f, 0.0f, -0.28726485f, -0.32037386f, -0.90268457f, 0.499976f, -0.51164f, 
    -0.098162f, 0.079991f, -0.005237f, 1.0f, 0.0f, 0.0f, 0.13609207f, -0.8579594f, -0.49536324f, 0.50005f, -0.51162f, 
    -0.09653f, 0.078098f, 0.0158f, 1.0f, 0.0f, 0.0f, 0.21240297f, -0.9537619f, 0.21265797f, 0.50008f, -0.511616f, 
    -0.090193f, 0.132295f, -0.018853f, 1.0f, 0.0f, 0.0f, -0.29909107f, 0.5679671f, -0.7667842f, 0.499894f, -0.511729f, 
    -0.108595f, 0.132211f, 0.003705f, 1.0f, 0.0f, 0.0f, -0.66673225f, 0.7135642f, -0.21516107f, 0.499861f, -0.51169f, 
    -0.095351f, 0.141565f, 0.027886f, 1.0f, 0.0f, 0.0f, -0.42947194f, 0.8024819f, 0.41421795f, 0.499894f, -0.511729f, 
    -0.110208f, 0.080696f, 0.024011f, 1.0f, 0.0f, 0.0f, -0.318283f, -0.852224f, 0.415223f, 0.50004f, -0.511591f, 
    -0.118627f, 0.092176f, 0.027966f, 1.0f, 0.0f, 0.0f, -0.719744f, -0.332945f, 0.609193f, 0.499985f, -0.511595f, 
    -0.102461f, 0.087716f, 0.033712f, 1.0f, 0.0f, 0.0f, -0.0025699993f, -0.5967639f, 0.8024128f, 0.50005f, -0.51162f, 
    -0.063816f, 0.092342f, 0.016585f, 1.0f, 0.0f, 0.0f, 0.43420807f, -0.8720281f, 0.22589903f, 0.500131f, -0.511709f, 
    -0.095153f, 0.142612f, 0.003123f, 1.0f, 0.0f, 0.0f, -0.4720899f, 0.8533018f, -0.22137594f, 0.499868f, -0.511736f, 
    -0.066314f, 0.09492f, -0.008781f, 1.0f, 0.0f, 0.0f, 0.3435031f, -0.7648902f, -0.5449301f, 0.500089f, -0.51171f, 
    -0.07212f, 0.104918f, 0.037742f, 1.0f, 0.0f, 0.0f, 0.18193804f, -0.48552513f, 0.8550812f, 0.500087f, -0.511709f, 
    -0.051782f, 0.113566f, 0.038271f, 1.0f, 0.0f, 0.0f, 0.30498695f, -0.5133399f, 0.8021628f, 0.500114f, -0.511767f, 
    -0.046623f, 0.104296f, -0.008467f, 1.0f, 0.0f, 0.0f, 0.45180613f, -0.7619092f, -0.46407512f, 0.500114f, -0.511767f, 
    -0.044494f, 0.132681f, 0.039371f, 1.0f, 0.0f, 0.0f, 0.395587f, 0.374841f, 0.838454f, 0.500078f, -0.511818f, 
    -0.06581f, 0.130072f, 0.043677f, 1.0f, 0.0f, 0.0f, 0.019410992f, 0.2838689f, 0.9586666f, 0.500027f, -0.511769f, 
    -0.058502f, 0.116939f, -0.022536f, 1.0f, 0.0f, 0.0f, 0.23378597f, -0.09461199f, -0.9676739f, 0.500027f, -0.511769f, 
    -0.051124f, 0.100511f, 0.015339f, 1.0f, 0.0f, 0.0f, 0.5437712f, -0.8132233f, 0.20731807f, 0.500139f, -0.511749f, 
    -0.04303f, 0.13958f, -0.010991f, 1.0f, 0.0f, 0.0f, 0.46549195f, 0.5644199f, -0.68172395f, 0.500011f, -0.511837f, 
    -0.038475f, 0.121866f, -0.015157f, 1.0f, 0.0f, 0.0f, 0.57835287f, 0.04626399f, -0.8144738f, 0.500078f, -0.511818f, 
    -0.046807f, 0.149779f, 0.007043f, 1.0f, 0.0f, 0.0f, 0.26524296f, 0.95091987f, -0.15936598f, 0.499983f, -0.511846f, 
    -0.06651f, 0.138682f, -0.017505f, 1.0f, 0.0f, 0.0f, 0.05405101f, 0.67555016f, -0.73533016f, 0.49994f, -0.511789f, 
    -0.072014f, 0.151111f, 0.003991f, 1.0f, 0.0f, 0.0f, -0.16925402f, 0.9629991f, -0.20972803f, 0.499905f, -0.511798f, 
    -0.047329f, 0.147305f, 0.027958f, 1.0f, 0.0f, 0.0f, 0.3348079f, 0.7990598f, 0.49940687f, 0.500011f, -0.511837f, 
    -0.030843f, 0.137823f, 0.011186f, 1.0f, 0.0f, 0.0f, 0.7626343f, 0.64534324f, -0.043831013f, 0.50007f, -0.511858f, 
    -0.071669f, 0.147952f, 0.029234f, 1.0f, 0.0f, 0.0f, -0.07361303f, 0.9048003f, 0.41942516f, 0.49994f, -0.511789f, 
    0.108419f, 0.10708f, 0.038418f, 1.0f, 0.0f, 0.0f, 0.4837263f, 0.03296102f, 0.87459856f, 0.499976f, -0.51164f, 
    0.119215f, 0.117076f, 0.026021f, 1.0f, 0.0f, 0.0f, 0.8355723f, 0.28607708f, 0.46901917f, 0.499902f, -0.511639f, 
    0.109544f, 0.128933f, 0.027804f, 1.0f, 0.0f, 0.0f, 0.66311824f, 0.58519024f, 0.46671918f, 0.499893f, -0.511678f, 
    0.088305f, 0.12242f, 0.043736f, 1.0f, 0.0f, 0.0f, 0.19465391f, 0.11627795f, 0.9739555f, 0.499987f, -0.511708f, 
    0.120094f, 0.119624f, 0.004937f, 1.0f, 0.0f, 0.0f, 0.8679467f, 0.46007583f, -0.18707994f, 0.499872f, -0.511643f, 
    0.12479f, 0.101607f, 0.018241f, 1.0f, 0.0f, 0.0f, 0.9890069f, -0.05009099f, 0.13912699f, 0.499931f, -0.511601f, 
    0.114916f, 0.109351f, -0.012928f, 1.0f, 0.0f, 0.0f, 0.705815f, 0.052408f, -0.706455f, 0.499902f, -0.511639f, 
    0.122641f, 0.097744f, -0.001234f, 1.0f, 0.0f, 0.0f, 0.93895036f, -0.14023505f, -0.3141761f, 0.499931f, -0.511601f, 
    0.114974f, 0.085609f, -0.005141f, 1.0f, 0.0f, 0.0f, 0.58879036f, -0.56831735f, -0.57475334f, 0.499985f, -0.511595f, 
    0.104599f, 0.120049f, -0.016987f, 1.0f, 0.0f, 0.0f, 0.5253982f, 0.3372501f, -0.7811653f, 0.499893f, -0.511678f, 
    0.117973f, 0.082704f, 0.012515f, 1.0f, 0.0f, 0.0f, 0.7890113f, -0.61340326f, 0.03460801f, 0.500003f, -0.51158f, 
    0.108057f, 0.076833f, 0.004538f, 1.0f, 0.0f, 0.0f, 0.25906694f, -0.9584138f, -0.11969697f, 0.50004f, -0.511591f, 
    0.102185f, 0.095879f, -0.018058f, 1.0f, 0.0f, 0.0f, 0.28726485f, -0.32037386f, -0.90268457f, 0.499976f, -0.51164f, 
    0.080782f, 0.108901f, -0.024424f, 1.0f, 0.0f, 0.0f, -0.015475996f, -0.26456094f, -0.9642448f, 0.499987f, -0.511708f, 
    0.09653f, 0.078098f, 0.0158f, 1.0f, 0.0f, 0.0f, -0.21240297f, -0.9537619f, 0.21265797f, 0.50008f, -0.511616f, 
    0.098162f, 0.079991f, -0.005237f, 1.0f, 0.0f, 0.0f, -0.13609207f, -0.8579594f, -0.49536324f, 0.50005f, -0.51162f, 
    0.090193f, 0.132295f, -0.018853f, 1.0f, 0.0f, 0.0f, 0.29909107f, 0.5679671f, -0.7667842f, 0.499894f, -0.511729f, 
    0.095351f, 0.141565f, 0.027886f, 1.0f, 0.0f, 0.0f, 0.42947194f, 0.8024819f, 0.41421795f, 0.499894f, -0.511729f, 
    0.108595f, 0.132211f, 0.003705f, 1.0f, 0.0f, 0.0f, 0.66673225f, 0.7135642f, -0.21516107f, 0.499861f, -0.51169f, 
    0.118627f, 0.092176f, 0.027966f, 1.0f, 0.0f, 0.0f, 0.7197432f, -0.33294508f, 0.6091941f, 0.499985f, -0.511595f, 
    0.110208f, 0.080696f, 0.024011f, 1.0f, 0.0f, 0.0f, 0.318283f, -0.852224f, 0.415223f, 0.50004f, -0.511591f, 
    0.063816f, 0.092342f, 0.016585f, 1.0f, 0.0f, 0.0f, -0.43420726f, -0.8720285f, 0.22589913f, 0.500131f, -0.511709f, 
    0.102461f, 0.087716f, 0.033712f, 1.0f, 0.0f, 0.0f, 0.0025699993f, -0.5967639f, 0.8024128f, 0.50005f, -0.51162f, 
    0.095153f, 0.142612f, 0.003123f, 1.0f, 0.0f, 0.0f, 0.47208977f, 0.8533016f, -0.2213769f, 0.499868f, -0.511736f, 
    0.066314f, 0.09492f, -0.008781f, 1.0f, 0.0f, 0.0f, -0.3435031f, -0.7648902f, -0.5449301f, 0.500089f, -0.51171f, 
    0.07212f, 0.104918f, 0.037742f, 1.0f, 0.0f, 0.0f, -0.18193804f, -0.48552513f, 0.8550812f, 0.500087f, -0.511709f, 
    0.051782f, 0.113566f, 0.038271f, 1.0f, 0.0f, 0.0f, -0.30498704f, -0.51334107f, 0.8021621f, 0.500114f, -0.511767f, 
    0.046623f, 0.104296f, -0.008467f, 1.0f, 0.0f, 0.0f, -0.45180613f, -0.7619092f, -0.46407512f, 0.500114f, -0.511767f, 
    0.06581f, 0.130072f, 0.043677f, 1.0f, 0.0f, 0.0f, -0.019410992f, 0.2838689f, 0.9586666f, 0.500027f, -0.511769f, 
    0.044494f, 0.132681f, 0.039371f, 1.0f, 0.0f, 0.0f, -0.395587f, 0.374841f, 0.838454f, 0.500078f, -0.511818f, 
    0.058502f, 0.116939f, -0.022536f, 1.0f, 0.0f, 0.0f, -0.23378597f, -0.09461199f, -0.9676739f, 0.500027f, -0.511769f, 
    0.051124f, 0.100511f, 0.015339f, 1.0f, 0.0f, 0.0f, -0.5437708f, -0.8132236f, 0.20731789f, 0.500139f, -0.511749f, 
    0.038475f, 0.121866f, -0.015157f, 1.0f, 0.0f, 0.0f, -0.57835287f, 0.04626399f, -0.8144738f, 0.500078f, -0.511818f, 
    0.04303f, 0.13958f, -0.010991f, 1.0f, 0.0f, 0.0f, -0.46549195f, 0.5644199f, -0.68172395f, 0.500011f, -0.511837f, 
    0.06651f, 0.138682f, -0.017505f, 1.0f, 0.0f, 0.0f, -0.05405101f, 0.67555016f, -0.73533016f, 0.49994f, -0.511789f, 
    0.046807f, 0.149779f, 0.007043f, 1.0f, 0.0f, 0.0f, -0.26524296f, 0.95091987f, -0.15936598f, 0.499983f, -0.511846f, 
    0.072014f, 0.151111f, 0.003991f, 1.0f, 0.0f, 0.0f, 0.16925402f, 0.9629991f, -0.20972803f, 0.499905f, -0.511798f, 
    0.030843f, 0.137823f, 0.011186f, 1.0f, 0.0f, 0.0f, -0.7626343f, 0.64534324f, -0.043831013f, 0.50007f, -0.511858f, 
    0.047329f, 0.147305f, 0.027958f, 1.0f, 0.0f, 0.0f, -0.3348079f, 0.7990598f, 0.49940687f, 0.500011f, -0.511837f, 
    0.071669f, 0.147952f, 0.029234f, 1.0f, 0.0f, 0.0f, 0.07361303f, 0.9048003f, 0.41942516f, 0.49994f, -0.511789f, 
};

// Kirby Triangles
GLuint indices[] =
{
    0, 1, 2, 
1, 0, 3, 
4, 5, 2, 
2, 1, 4, 
6, 7, 2, 
0, 2, 7, 
8, 7, 9, 
7, 8, 0, 
10, 11, 8, 
8, 11, 3, 
12, 11, 13, 
11, 10, 13, 
10, 14, 15, 
13, 10, 15, 
16, 15, 17, 
15, 14, 17, 
18, 16, 19, 
16, 17, 19, 
20, 18, 21, 
18, 19, 21, 
11, 12, 22, 
20, 21, 23, 
24, 25, 22, 
25, 11, 22, 
26, 27, 24, 
22, 26, 24, 
28, 27, 23, 
23, 27, 26, 
4, 28, 29, 
23, 29, 28, 
30, 31, 25, 
30, 25, 24, 
26, 20, 23, 
1, 31, 30, 
32, 19, 33, 
33, 19, 17, 
34, 35, 17, 
17, 35, 33, 
33, 35, 36, 
36, 35, 34, 
37, 36, 2, 
33, 37, 32, 
5, 38, 32, 
2, 5, 37, 
2, 36, 39, 
32, 38, 21, 
23, 21, 29, 
29, 38, 5, 
5, 4, 29, 
21, 38, 29, 
32, 37, 5, 
36, 37, 33, 
39, 34, 40, 
21, 19, 32, 
41, 40, 14, 
14, 40, 34, 
14, 10, 41, 
34, 17, 14, 
9, 10, 8, 
10, 9, 41, 
39, 42, 2, 
41, 9, 7, 
2, 42, 6, 
6, 42, 40, 
41, 7, 6, 
39, 36, 34, 
40, 42, 39, 
40, 41, 6, 
28, 30, 24, 
30, 28, 4, 
30, 4, 1, 
24, 27, 28, 
3, 31, 1, 
3, 11, 25, 
25, 31, 3, 
16, 13, 15, 
3, 0, 8, 
12, 13, 18, 
13, 16, 18, 
22, 12, 20, 
12, 18, 20, 
26, 22, 20, 
43, 44, 45, 
46, 45, 44, 
43, 47, 48, 
48, 44, 43, 
43, 49, 50, 
49, 43, 45, 
51, 49, 52, 
45, 52, 49, 
52, 53, 54, 
46, 53, 52, 
55, 53, 56, 
55, 54, 53, 
57, 58, 54, 
57, 54, 55, 
59, 57, 60, 
59, 58, 57, 
61, 60, 62, 
61, 59, 60, 
63, 62, 64, 
63, 61, 62, 
65, 56, 53, 
66, 63, 64, 
65, 67, 68, 
65, 53, 67, 
68, 69, 70, 
68, 70, 65, 
66, 69, 71, 
70, 69, 66, 
72, 71, 48, 
71, 72, 66, 
67, 73, 74, 
68, 67, 74, 
66, 64, 70, 
74, 73, 44, 
75, 61, 76, 
59, 61, 75, 
59, 77, 78, 
75, 77, 59, 
79, 77, 75, 
78, 77, 79, 
43, 79, 80, 
76, 80, 75, 
76, 81, 47, 
80, 47, 43, 
82, 79, 43, 
63, 81, 76, 
72, 63, 66, 
47, 81, 72, 
72, 48, 47, 
72, 81, 63, 
47, 80, 76, 
75, 80, 79, 
83, 78, 82, 
76, 61, 63, 
58, 83, 84, 
78, 83, 58, 
84, 54, 58, 
58, 59, 78, 
52, 54, 51, 
84, 51, 54, 
43, 85, 82, 
49, 51, 84, 
50, 85, 43, 
83, 85, 50, 
50, 49, 84, 
78, 79, 82, 
82, 85, 83, 
50, 84, 83, 
68, 74, 71, 
48, 71, 74, 
44, 48, 74, 
71, 69, 68, 
44, 73, 46, 
67, 53, 46, 
46, 73, 67, 
57, 55, 60, 
52, 45, 46, 
62, 55, 56, 
62, 60, 55, 
64, 56, 65, 
64, 62, 56, 
64, 65, 70, 
86, 87, 88, 
89, 90, 91, 
92, 93, 90, 
89, 92, 90, 
86, 94, 95, 
87, 86, 95, 
87, 96, 97, 
95, 96, 87, 
89, 98, 99, 
100, 98, 89, 
99, 101, 102, 
99, 98, 101, 
92, 103, 104, 
103, 99, 102, 
104, 105, 106, 
105, 104, 103, 
102, 107, 108, 
102, 101, 107, 
109, 105, 110, 
110, 102, 108, 
106, 111, 112, 
105, 109, 111, 
108, 113, 114, 
108, 107, 113, 
98, 100, 115, 
116, 108, 114, 
95, 117, 118, 
96, 118, 119, 
98, 115, 101, 
94, 120, 117, 
101, 115, 121, 
122, 123, 124, 
118, 124, 123, 
122, 125, 126, 
124, 125, 122, 
127, 126, 128, 
122, 126, 127, 
129, 128, 130, 
127, 128, 129, 
131, 130, 132, 
129, 130, 131, 
125, 133, 134, 
125, 134, 126, 
117, 135, 124, 
135, 133, 125, 
126, 136, 128, 
126, 134, 136, 
128, 137, 130, 
128, 136, 137, 
130, 138, 132, 
130, 137, 138, 
139, 132, 140, 
132, 138, 140, 
133, 141, 142, 
133, 142, 134, 
120, 143, 135, 
143, 141, 133, 
134, 144, 136, 
134, 142, 144, 
136, 145, 137, 
136, 144, 145, 
137, 146, 138, 
137, 145, 146, 
101, 121, 107, 
107, 121, 147, 
147, 148, 149, 
107, 147, 113, 
150, 151, 149, 
113, 149, 151, 
152, 153, 150, 
153, 151, 150, 
154, 155, 150, 
150, 155, 152, 
152, 156, 157, 
157, 153, 152, 
156, 158, 159, 
156, 152, 158, 
160, 159, 161, 
160, 156, 159, 
162, 160, 163, 
163, 160, 161, 
162, 164, 160, 
165, 166, 167, 
168, 165, 169, 
170, 164, 162, 
170, 171, 164, 
169, 167, 172, 
163, 161, 173, 
111, 171, 170, 
167, 174, 175, 
166, 176, 174, 
177, 175, 174, 
172, 175, 178, 
179, 177, 140, 
175, 177, 179, 
177, 180, 140, 
181, 179, 140, 
180, 182, 140, 
176, 182, 180, 
173, 161, 183, 
173, 183, 184, 
161, 185, 183, 
184, 183, 186, 
183, 185, 186, 
161, 159, 185, 
159, 158, 187, 
159, 187, 185, 
187, 188, 186, 
185, 187, 186, 
155, 189, 158, 
189, 188, 187, 
190, 191, 188, 
188, 191, 186, 
191, 192, 186, 
154, 190, 189, 
193, 194, 190, 
194, 192, 191, 
158, 152, 155, 
148, 193, 154, 
189, 155, 154, 
187, 158, 189, 
154, 149, 148, 
188, 189, 190, 
190, 154, 193, 
150, 149, 154, 
132, 139, 131, 
191, 190, 194, 
174, 180, 177, 
180, 174, 176, 
175, 172, 167, 
174, 167, 166, 
179, 178, 175, 
195, 172, 196, 
178, 196, 172, 
197, 195, 198, 
196, 198, 195, 
199, 197, 200, 
198, 200, 197, 
201, 202, 199, 
199, 202, 197, 
203, 204, 201, 
201, 204, 202, 
205, 203, 206, 
203, 205, 204, 
205, 207, 208, 
205, 208, 204, 
204, 209, 202, 
204, 208, 209, 
202, 210, 197, 
202, 209, 210, 
207, 211, 208, 
210, 169, 195, 
208, 211, 212, 
207, 213, 211, 
209, 212, 168, 
208, 212, 209, 
214, 207, 205, 
209, 168, 210, 
215, 216, 217, 
214, 206, 218, 
219, 106, 220, 
215, 219, 221, 
215, 92, 104, 
104, 219, 215, 
205, 206, 214, 
213, 207, 214, 
106, 219, 104, 
216, 215, 221, 
172, 195, 169, 
195, 197, 210, 
170, 112, 111, 
169, 210, 168, 
112, 220, 106, 
111, 106, 105, 
220, 221, 219, 
99, 103, 92, 
167, 169, 165, 
103, 110, 105, 
92, 89, 99, 
89, 91, 100, 
102, 110, 103, 
118, 96, 95, 
119, 97, 96, 
117, 95, 94, 
123, 119, 118, 
135, 117, 120, 
124, 118, 117, 
133, 135, 143, 
125, 124, 135, 
222, 109, 116, 
110, 116, 109, 
171, 222, 223, 
109, 222, 171, 
223, 222, 224, 
116, 224, 222, 
224, 153, 223, 
164, 223, 157, 
157, 223, 153, 
157, 156, 160, 
160, 164, 157, 
151, 153, 224, 
223, 164, 171, 
151, 114, 113, 
224, 114, 151, 
171, 111, 109, 
114, 224, 116, 
149, 113, 147, 
108, 116, 110, 
225, 226, 227, 
225, 227, 228, 
229, 226, 230, 
230, 226, 225, 
231, 230, 232, 
231, 229, 230, 
233, 231, 232, 
234, 232, 230, 
233, 235, 236, 
231, 233, 236, 
237, 238, 234, 
238, 232, 234, 
235, 239, 240, 
233, 238, 239, 
234, 241, 237, 
239, 238, 237, 
242, 225, 243, 
241, 234, 242, 
244, 245, 236, 
240, 244, 235, 
246, 240, 247, 
245, 244, 246, 
242, 248, 241, 
239, 249, 247, 
246, 250, 228, 
244, 240, 246, 
243, 248, 242, 
244, 236, 235, 
245, 227, 226, 
228, 243, 225, 
231, 236, 229, 
245, 229, 236, 
251, 250, 247, 
247, 249, 252, 
253, 254, 251, 
250, 251, 254, 
249, 237, 255, 
256, 251, 247, 
257, 258, 255, 
252, 255, 258, 
259, 257, 260, 
255, 260, 257, 
260, 241, 261, 
241, 260, 255, 
259, 262, 263, 
258, 257, 263, 
254, 253, 262, 
263, 262, 253, 
243, 264, 261, 
264, 262, 259, 
261, 248, 243, 
243, 228, 254, 
241, 248, 261, 
257, 259, 263, 
260, 261, 259, 
259, 261, 264, 
255, 237, 241, 
254, 264, 243, 
255, 252, 249, 
262, 264, 254, 
254, 228, 250, 
237, 249, 239, 
247, 240, 239, 
247, 252, 256, 
228, 227, 246, 
247, 250, 246, 
226, 229, 245, 
246, 227, 245, 
232, 238, 233, 
239, 235, 233, 
230, 242, 234, 
225, 242, 230, 
265, 266, 267, 
268, 265, 267, 
269, 266, 270, 
267, 266, 269, 
271, 269, 272, 
269, 270, 272, 
271, 272, 273, 
269, 271, 274, 
275, 276, 273, 
275, 273, 272, 
274, 277, 278, 
274, 271, 277, 
279, 280, 276, 
280, 277, 273, 
278, 281, 274, 
278, 277, 280, 
282, 267, 283, 
283, 274, 281, 
275, 284, 285, 
276, 285, 279, 
286, 279, 287, 
287, 285, 284, 
281, 288, 283, 
286, 289, 280, 
268, 290, 287, 
287, 279, 285, 
283, 288, 282, 
276, 275, 285, 
266, 265, 284, 
267, 282, 268, 
270, 275, 272, 
275, 270, 284, 
286, 290, 291, 
292, 289, 286, 
291, 293, 294, 
293, 291, 290, 
295, 278, 289, 
286, 291, 296, 
295, 297, 298, 
297, 295, 292, 
299, 298, 300, 
298, 299, 295, 
301, 281, 299, 
295, 299, 281, 
302, 303, 300, 
302, 298, 297, 
303, 294, 293, 
294, 303, 302, 
301, 304, 282, 
300, 303, 304, 
282, 288, 301, 
293, 268, 282, 
301, 288, 281, 
302, 300, 298, 
300, 301, 299, 
304, 301, 300, 
281, 278, 295, 
282, 304, 293, 
289, 292, 295, 
293, 304, 303, 
290, 268, 293, 
280, 289, 278, 
280, 279, 286, 
296, 292, 286, 
287, 265, 268, 
287, 290, 286, 
284, 270, 266, 
284, 265, 287, 
273, 277, 271, 
273, 276, 280, 
274, 283, 269, 
269, 283, 267, 
};


// define OpenGL object IDs to represent the vertex array and the shader program in the GPU

// vertex array objects (store the render state for our vertex array)
GLuint vao1;        // vao for Main Platform Vertices
GLuint vao2;        // vao for first platform
GLuint vao3;        // vao for second platform
GLuint vao4;        // vao for third platform
GLuint vao5;        // vao for fourth platform
GLuint vao6;        // vao for background
GLuint vao7;        // vao for background clouds
GLuint vaoKirby;

// vertex buffer objects (reserve GPU memory for our vertex array)
GLuint vbo1;        // vbo for Main Platform Vertices
GLuint vbo2;        // vbo for first platform
GLuint vbo3;        // vbo for second platform
GLuint vbo4;        // vbo for third platform
GLuint vbo5;        // vbo for fourth plaform
GLuint vbo6;        // vbo for background
GLuint vbo7;        // vbo for background clouds
GLuint vboKirby;

// combined vertex and fragment shaders
GLuint shader1;     // shader for Main Platform Vertices
GLuint shader2;     // shader for first platform
GLuint shader3;     // shader for second platform
GLuint shader4;     // shader for third platform
GLuint shader5;     // shader for fourth platform
GLuint shader6;     // shader for background
GLuint shader7;     // shader for background clouds
GLuint shaderKirby;

// element buffer objects
GLuint eboKirby;

// textures
GLuint bgtexture;   // background texture
GLuint texture0;    // first texture - main platform
GLuint texture1;    // second texture - small platform
GLuint texture2;    // third texture - background
GLuint texture3;    // third texture - background clouds

glm::vec3 eyePosition, forwardVector, upVector; // parameters of lookAt function

// timing
float deltaTime = 0.0f; // time between current frame and last frame
float lastFrame = 0.0f;

// mouse variables
float yaw = -90.0f;
float pitch = 0.0f;
float fov = 45.0f;

bool firstMouse = true;
float lastX = 640.0f / 2.0;
float lastY = 360.0f / 2.0;


// called by the main function to do initial setup, such as uploading vertex
// arrays, shader programs, etc.; returns true if successful, false otherwise
bool setup()
{
    // setup for main platform

    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(1, &vao1);
    glGenBuffers(1, &vbo1);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao1);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo1);
    glBufferData(GL_ARRAY_BUFFER, sizeof(mainPlatformVertices), mainPlatformVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);


    // setup for first platform

    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(2, &vao2);
    glGenBuffers(2, &vbo2);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao2);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo2);
    glBufferData(GL_ARRAY_BUFFER, sizeof(platformVertices), platformVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

    // setup for second platform

    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(3, &vao3);
    glGenBuffers(3, &vbo3);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao3);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo3);
    glBufferData(GL_ARRAY_BUFFER, sizeof(platformVertices), platformVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

    // setup for the third platform
    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(4, &vao4);
    glGenBuffers(4, &vbo4);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao4);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo4);
    glBufferData(GL_ARRAY_BUFFER, sizeof(platformVertices), platformVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

// setup for the fourth platform
    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(5, &vao5);
    glGenBuffers(5, &vbo5);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao5);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo5);
    glBufferData(GL_ARRAY_BUFFER, sizeof(platformVertices), platformVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

//  setup for background
        // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(6, &vao6);
    glGenBuffers(6, &vbo6);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao6);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo6);
    glBufferData(GL_ARRAY_BUFFER, sizeof(backgroundVertices), backgroundVertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

//  setup for background clouds
        // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(7, &vao7);
    glGenBuffers(7, &vbo7);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao7);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo7);
    glBufferData(GL_ARRAY_BUFFER, sizeof(backgroundVertices2), backgroundVertices2, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 8 floats of each vertex (hence, 8 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(3 * sizeof(float)));

    // for layout location 2, these correspond to the normal
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*)(9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

    // setup for kirby

    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(8, &vaoKirby);
    glGenBuffers(8, &vboKirby);
    glGenBuffers(9, &eboKirby);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vaoKirby);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vboKirby);
    glBufferData(GL_ARRAY_BUFFER, sizeof(kirbyVertices), kirbyVertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eboKirby);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // replaced this to allow for polygon definition
    // glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 11 floats of each vertex (hence, 11 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);

    // for layout location 1, these correspond to the color values (r, g, b)
    //  it has an offset of 3 * sizeof(float) since it is after the 3 float values from the initial vertices
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));

    // for layout location 2, these correspond to the normal vector (x, y, z)
    //  it has an offset of 6 * sizeof(float) since it is after the 3 float values from the initial vertices
    //  and the 3 float values that indicate the color
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));

    // for layout location 3, these correspond to the texture coordinates (s, t)
    //  it has an offset of 9 * sizeof(float) since it is after the 3 float values from the initial vertices,
    //  the 3 float values that indicate the color, and the 3 float values from normal vector
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));

    // enable the newly-created layout location 0
    // this shall be used by our vertex shader to draw the triangles
    glEnableVertexAttribArray(0);

    // enable the colors as well
    glEnableVertexAttribArray(1);

    // and also the normal vectors
    glEnableVertexAttribArray(2);

    // and also the texture coordinates
    glEnableVertexAttribArray(3);

    // load our shader program for main platform
    shader1 = gdevLoadShader("exercise3-1.vs", "exercise3.fs");
    if (! shader1)
        return false;

    // load our shader program for first platform
    shader2 = gdevLoadShader("exercise3-2.vs", "exercise3.fs");
    if (! shader2)
        return false;
    
    // load our shader program for second platform
    shader3 = gdevLoadShader("exercise3-3.vs", "exercise3.fs");
    if (! shader3)
        return false;

    // load our shader program for third platform
    shader4 = gdevLoadShader("exercise3-4.vs", "exercise3.fs");
    if (! shader4)
        return false;

    // load our shader program for fourth platform
    shader5 = gdevLoadShader("exercise3-5.vs", "exercise3.fs");
    if (! shader5)
        return false;

    // load our shader program for background
    shader6 = gdevLoadShader("exercise3-6.vs", "exercise3.fs");
    if (!shader6)
        return false;

    // load our shader program for background
    shader7 = gdevLoadShader("exercise3-7.vs", "exercise3.fs");
    if (!shader7)
        return false;

    // load our shader program for kirby
    shaderKirby = gdevLoadShader("exercise3-kirby.vs", "exercise3.fs");
    if (! shaderKirby)
        return false;

    // load first texture
    texture0 = gdevLoadTexture("grass.jpg", GL_REPEAT, true, true);
    if (! texture0)
        return false;

    // load second texture
    texture1 = gdevLoadTexture("way.png", GL_REPEAT, true, true);
    if (! texture1)
        return false;

    // load third texture
    texture2 = gdevLoadTexture("FinalDestination.jpg", GL_REPEAT, true, true);
    if (!texture2)
        return false;

    // load fourth texture
    texture3 = gdevLoadTexture("Space.jpg", GL_REPEAT, true, true);
    if (!texture3)
        return false;
    
    // setting camera position to (-2, 0, 3), forward vector to (0,0,-1), and up vector (0,1,0)
    eyePosition = glm::vec3(-1.0f, 1.0f, 3.5f);
    forwardVector = glm::vec3(0.0f, 0.0f, -1.0f);
    upVector = glm::vec3(0.0f, 1.0f, 0.0f);

    return true;
}

// called by the main function to do rendering per frame
void render()
{
    // time logic for camera
    float currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;

    // clear the whole frame
    glClearColor(0.0f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // base matrix = multiplying projection matrix and view transform matrix
    glm::mat4 baseMatrix;

    // calculate projection matrix
    baseMatrix = glm::perspective(glm::radians(fov),
                    (float) WINDOW_WIDTH / WINDOW_HEIGHT,
                    0.1f,
                    100.0f);
    
    // calculating view transform matrix
    glm::mat4 viewTransform;
    viewTransform = glm::lookAt(eyePosition, eyePosition + forwardVector, upVector);

    // multiplying perspective matrix by view transform matrix
    baseMatrix = baseMatrix * viewTransform;

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // using our shader program for the first triangle...
    glUseProgram(shader1);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... calculate matrix for first triangle ...
    glm::mat4 matrix1;
    matrix1 = glm::translate(baseMatrix, glm::vec3(-1.0f, 0.2f, 0.0f));

    // matrix1 = glm::rotate(matrix1, glm::radians(60.0f),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    // matrix1 = glm::rotate(matrix1, glm::radians(rotationAngle),
    //         glm::vec3(1.0f, 0.0f, 0.0f));

    matrix1 = glm::scale(matrix1, glm::vec3(4.0f, 1.0f, 2.0f));

    glUniformMatrix4fv(glGetUniformLocation(shader1, "matrix1"),
            1, GL_FALSE, glm::value_ptr(matrix1));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture0); 

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader1, "shaderTexture0"), 0);


    // ... draw our triangles
    glBindVertexArray(vao1);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(mainPlatformVertices) / (11 * sizeof(float)));


    // using our shader program for the second triangle...
    glUseProgram(shader2);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... calculate matrix for second triangle ...
    glm::mat4 matrix2;
    matrix2 = glm::translate(baseMatrix, glm::vec3(-0.5f, 1.5f, -0.2f));

    //matrix2 = glm::rotate(matrix2, glm::radians(15.0f),
            //glm::vec3(1.0f, 0.0f, 0.0f));

    //matrix2 = glm::rotate(matrix2, glm::radians(rotationAngle),
            //glm::vec3(0.0f, 1.0f, 0.0f));

    matrix2 = glm::scale(matrix2, glm::vec3(2.0f, 1.0f, 1.5f));

    glUniformMatrix4fv(glGetUniformLocation(shader2, "matrix2"),
            1, GL_FALSE, glm::value_ptr(matrix2));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1); 

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader2, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao2);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(mainPlatformVertices) / (11 * sizeof(float)));


    // using our shader program for the third triangle...
    glUseProgram(shader3);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... calculate matrix for third triangle ...
    glm::mat4 matrix3;
    matrix3 = glm::translate(baseMatrix, glm::vec3(-2.5f, 1.5f, -0.2f));

    // matrix3 = glm::rotate(matrix3, glm::radians(105.0f),
    //         glm::vec3(0.0f, 1.0f, 0.0f));

    // matrix3 = glm::rotate(matrix3, glm::radians(rotationAngle),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    matrix3 = glm::scale(matrix3, glm::vec3(2.0f, 1.0f, 1.5f));

    glUniformMatrix4fv(glGetUniformLocation(shader3, "matrix3"),
            1, GL_FALSE, glm::value_ptr(matrix3));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1); 

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader3, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao3);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(mainPlatformVertices) / (11 * sizeof(float)));

    // third platform
    glUseProgram(shader4);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... calculate matrix for third triangle ...
    glm::mat4 matrix4;
    matrix4 = glm::translate(baseMatrix, glm::vec3(-3.5f, 0.9f, -0.2f));

    // matrix4 = glm::rotate(matrix4, glm::radians(105.0f),
    //         glm::vec3(0.0f, 1.0f, 0.0f));

    // matrix4 = glm::rotate(matrix4, glm::radians(rotationAngle),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    matrix4 = glm::scale(matrix4, glm::vec3(2.0f, 1.0f, 1.5f));

    glUniformMatrix4fv(glGetUniformLocation(shader4, "matrix4"),
            1, GL_FALSE, glm::value_ptr(matrix4));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1); 

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader4, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao4);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(platformVertices) / (11 * sizeof(float)));

    // fourth platform
    glUseProgram(shader5);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... calculate matrix for third triangle ...
    glm::mat4 matrix5;
    matrix5 = glm::translate(baseMatrix, glm::vec3(0.5f, 0.9f, -0.2f));

    // matrix5 = glm::rotate(matrix5, glm::radians(105.0f),
    //         glm::vec3(0.0f, 1.0f, 0.0f));

    // matrix5 = glm::rotate(matrix5, glm::radians(rotationAngle),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    matrix5 = glm::scale(matrix5, glm::vec3(2.0f, 1.0f, 1.5f));

    glUniformMatrix4fv(glGetUniformLocation(shader5, "matrix5"),
            1, GL_FALSE, glm::value_ptr(matrix5));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture1); 

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader5, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao5);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(platformVertices) / (11 * sizeof(float)));

//Background
    glUseProgram(shader6);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);

    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST);

    // ... calculate matrix for third triangle ...
    glm::mat4 matrix6;
    matrix6 = glm::translate(baseMatrix, glm::vec3(-5.3f, -1.5f, -2.0f));

    // matrix6 = glm::rotate(matrix6, glm::radians(105.0f),
    //         glm::vec3(0.0f, 1.0f, 0.0f));

    // matrix6 = glm::rotate(matrix6, glm::radians(rotationAngle),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    matrix6 = glm::scale(matrix6, glm::vec3(8.5f, 5.0f, 1.0f));

    glUniformMatrix4fv(glGetUniformLocation(shader6, "matrix6"),
        1, GL_FALSE, glm::value_ptr(matrix6));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture2);

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader6, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao6);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(platformVertices) / (11 * sizeof(float)));

//Background Clouds
    glUseProgram(shader7);

    // ... enable cull face ...
    glEnable(GL_CULL_FACE);

    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST);

    // ... calculate matrix for third triangle ...
    glm::mat4 matrix7;
    matrix7 = glm::translate(baseMatrix, glm::vec3(-5.3f, -1.5f, -2.0f));

    // matrix6 = glm::rotate(matrix6, glm::radians(105.0f),
    //         glm::vec3(0.0f, 1.0f, 0.0f));

    // matrix6 = glm::rotate(matrix6, glm::radians(rotationAngle),
    //         glm::vec3(0.0f, 0.0f, 1.0f));

    matrix7 = glm::scale(matrix6, glm::vec3(1.0f, 1.0f, 5.0f)); // Leave this as matrix 6

    glUniformMatrix4fv(glGetUniformLocation(shader7, "matrix7"),
        1, GL_FALSE, glm::value_ptr(matrix7));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture3);

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shader7, "shaderTexture0"), 0);

    // ... draw our triangles
    glBindVertexArray(vao7);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(platformVertices) / (11 * sizeof(float)));

    // using our shader program for the kirby
    glUseProgram(shaderKirby);

    // ... enable cull face ... this is to stop it from rendering when not facing the viewer
    //glEnable(GL_CULL_FACE);
        
    // ... enable OpenGL's hidden surface removal ...
    glEnable(GL_DEPTH_TEST); 

    // ... timing settings
    const float pi = 3.14159265358979323846f;
    float timer = sin(glfwGetTime() / 2 - pi);
    
    // if (timer < 0){
    //     jump = fabs(sin(glfwGetTime() * 4)) / 4;
    //     arc = (sin(glfwGetTime() - pi/2) + 1.0f) / 2.0f;
    //     if (onRight){
    //         distance = (sin(glfwGetTime() / 2 - pi/2) + 1.0f);
    //     }
    //     else {
    //         distance = (sin(glfwGetTime() / 2 + pi/2) + 1.0f);
    //     }

    //     switchCheck = true;
    // }
    // else {
    //     walk = (sin(glfwGetTime() * 4)) / 3.0f;

    //     if (switchCheck){
    //         if (onRight) {
    //             onRight = false;
    //         }
    //         else {
    //             onRight = true;
    //         }
            
    //         std::cout << switchCheck << std::endl;
    //         switchCheck = false;
    //         std::cout << switchCheck << std::endl;
    //     }
    // }

    // ... calculate matrix for first triangle ...
    glm::mat4 matrixKirby;
    matrixKirby = glm::translate(baseMatrix, glm::vec3(-3.0f + distance + walk, 0.9f + jump + arc, -0.75f));

    matrixKirby = glm::rotate(matrixKirby, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));

    //matrix1 = glm::rotate(matrix1, glm::radians(rotationAngle),
            //glm::vec3(1.0f, 0.0f, 0.0f));

    matrixKirby = glm::scale(matrixKirby, glm::vec3(1.0f, 1.0f, 1.0f));

    glUniformMatrix4fv(glGetUniformLocation(shaderKirby, "matrixKirby"),
            1, GL_FALSE, glm::value_ptr(matrixKirby));

    // ... set the active textures...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture0); 
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, texture1);

    // ... connect each texture unit to a sampler2D in the fragment shader ...
    glUniform1i(glGetUniformLocation(shaderKirby, "shaderTexture0"), 0);
    glUniform1i(glGetUniformLocation(shaderKirby, "shaderTexture1"), 1);

    // ... draw our triangles
    glBindVertexArray(vaoKirby);
    glDrawElementsInstanced(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint), GL_UNSIGNED_INT, 0, 5);

}

/*****************************************************************************/

// handler called by GLFW when there is a keyboard event
void handleKeys(GLFWwindow* pWindow, int key, int scancode, int action, int mode)
{
    // pressing Esc closes the window
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(pWindow, GL_TRUE);
}

// handler called by GLFW when the window is resized
void handleResize(GLFWwindow* pWindow, int width, int height)
{
    // tell OpenGL to do its drawing within the entire "client area" (area within the borders) of the window
    glViewport(0, 0, width, height);
}

void mouse_callback(GLFWwindow* pWindow, double xpos, double ypos)
{
    if (firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    float sensitivity = 0.025f;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw += xoffset;
    pitch += yoffset;

    if (pitch > 89.0f)
        pitch = 89.0f;
    if (pitch < -89.0f)
        pitch = -89.0f;

    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    forwardVector = glm::normalize(front);
}


void scroll_callback(GLFWwindow* pWindow, double xoffset, double yoffset)
{
    if (fov >= 1.0f && fov <= 45.0f)
        fov -= yoffset;
    if (fov <= 1.0f)
        fov = 1.0f;
    if (fov >= 45.0f)
        fov = 45.0f;
}

// main function
int main(int argc, char** argv)
{
    // initialize GLFW and ask for OpenGL 3.3 core
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    // create a GLFW window with the specified width, height, and title
    pWindow = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE, NULL, NULL);
    if (! pWindow)
    {
        // gracefully terminate if we cannot create the window
        std::cout << "Cannot create the GLFW window.\n";
        glfwTerminate();
        return -1;
    }

    // make the window the current context of subsequent OpenGL commands,
    // and enable vertical sync and aspect-ratio correction on the GLFW window
    glfwMakeContextCurrent(pWindow);
    glfwSwapInterval(1);
    glfwSetWindowAspectRatio(pWindow, WINDOW_WIDTH, WINDOW_HEIGHT);

    // set up callback functions to handle window system events
    glfwSetKeyCallback(pWindow, handleKeys);
    glfwSetFramebufferSizeCallback(pWindow, handleResize);

    // mouse set up
    glfwSetCursorPosCallback(pWindow, mouse_callback);
    glfwSetScrollCallback(pWindow, scroll_callback);
    glfwSetInputMode(pWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // don't miss any momentary keypresses
    glfwSetInputMode(pWindow, GLFW_STICKY_KEYS, GLFW_TRUE);

    // initialize GLAD, which acts as a library loader for the current OS's native OpenGL library
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);

    // if our initial setup is successful...
    if (setup())
    {
        // do rendering in a loop until the user closes the window
        while (! glfwWindowShouldClose(pWindow))
        {
            // render our next frame
            // (by default, GLFW uses double-buffering with a front and back buffer;
            // all drawing goes to the back buffer, so the frame does not get shown yet)

            //Keyboard Controls
            float cameraSpeed = 2.5 * deltaTime;
            if (glfwGetKey(pWindow, GLFW_KEY_W) == GLFW_PRESS)
                eyePosition += cameraSpeed * forwardVector;
            if (glfwGetKey(pWindow, GLFW_KEY_S) == GLFW_PRESS)
                eyePosition -= cameraSpeed * forwardVector;
            if (glfwGetKey(pWindow, GLFW_KEY_A) == GLFW_PRESS)
                eyePosition -= glm::normalize(glm::cross(forwardVector, upVector)) * cameraSpeed;
            if (glfwGetKey(pWindow, GLFW_KEY_D) == GLFW_PRESS)
                eyePosition += glm::normalize(glm::cross(forwardVector, upVector)) * cameraSpeed;

            render();

            // swap the GLFW front and back buffers to show the next frame
            glfwSwapBuffers(pWindow);

            // process any window events (such as moving, resizing, keyboard presses, etc.)
            glfwPollEvents();
        }
    }

    // gracefully terminate the program
    glfwTerminate();
    return 0;
}
